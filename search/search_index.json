{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coding Bootcamp - 2022","text":"<p>This website contains the resources for the Coding Bootcamp - 2022 organized by ACM.</p>"},{"location":"#overview","title":"Overview","text":"<p>This bootcamp will provide its audience the core foundation in this amazing field of programming.</p>"},{"location":"#sessions","title":"Sessions","text":"Session Topic 1 HTML/CSS 2 JavaScript (Basics) 3 JavaScript (Advanced) 4 APIs 5 CLI &amp; Git 6 GitHub"},{"location":"#instructors","title":"Instructors","text":"<p>This workshop is conducted by the ACM Team</p>"},{"location":"01-HTML-CSS/","title":"HTML &amp; CSS","text":"<p>Welcome to the first session of ACM BITS Pilani Dubai's 2022 Coding BootCamp!!  </p> <p>We hope this bootcamp will set a rock solid foundation to your journey in Computer Science!  </p> <p>Over the course of our 6 Week long Coding Bootcamp, we will cover topics such as HTML, CSS, JavaScript, APIs, Command Line, Git and GitHub which are essential for you to become a successful Web Developer!</p>"},{"location":"01-HTML-CSS/#what-is-web-development","title":"What is Web Development ?","text":"<p>Web development refers to the process of  building, creating, and maintaining websites. It can be divided in to two parts:</p> <ul> <li> <p>Front-end/Frontend:    The front-end as the name suggests refers to the actual website that all the users will be able to see and interact with. A front end developer would would write code for the design, layout, colour schemes, animations, etc. of the website and make sure that it looks beautiful and  modern.</p> </li> <li> <p>Back-end/Backend:   The back-end refers to the functions of the website which is not seen by the  users, for example, information retrieval from databases.    A developer that is responsible for writing code for both frontend and backend is called a Full Stack Developer.</p> </li> </ul> <p>The three main languages which you will encounter frequently in Web Development are: </p> <ul> <li>HTML: The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.</li> <li>CSS: Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.</li> <li>JavaScript: JavaScript often abbreviated JS is language that is used to decide behaviour of a website (for e.g. what happens when you click a button). You will learn more about this in the JavaScript week of the Coding Bootcamp.</li> </ul> <p>This week, we'll be focusing on the concepts of HTML and CSS.</p>"},{"location":"01-HTML-CSS/#what-is-html","title":"What is HTML?","text":"<ul> <li>HTML stands for Hyper Text Markup Language, and it is the standard markup language for creating web pages. </li> <li>HTML describes the structure of a Web page, and consists of a series of elements (usually starting with <code>&lt;html&gt;</code> and ending with <code>&lt;/html&gt;</code>). Elements tell the browser how to display the content.</li> </ul>"},{"location":"01-HTML-CSS/#html-tags","title":"HTML Tags","text":"<p>Elements are denoted as \"tags\" in HTML, starting with <code>&lt; &gt;</code> and ending with <code>&lt; / &gt;</code> .  * There is a tag for every element of a web page. </p> <p>Let's look at a few of them: </p> Ross didn't know about HTML lists. Don't be like Ross.  <p></p> <p>You can also access the entire list of HTML tags here.</p>"},{"location":"01-HTML-CSS/#html","title":"<code>&lt;html&gt;</code>","text":"This is the HTML document tag, marks the start and end of HTML document. By convention, all other tags are included inside the <code>html</code> tag.   <code>&lt;html&gt;&lt;/html&gt;</code>"},{"location":"01-HTML-CSS/#title","title":"<code>&lt;title&gt;</code>","text":"This tag is used to decide what title will be display on the tab of the browser you are using.   <code>&lt;title&gt;&lt;/title&gt;</code>"},{"location":"01-HTML-CSS/#body","title":"<code>&lt;body&gt;</code>","text":"This tag encloses all the content inside the whitespace area or the area in which you can interact with the website.   <code>&lt;body&gt; Some content &lt;/body&gt; &lt;!-- Body of a webpage --&gt;</code>"},{"location":"01-HTML-CSS/#script","title":"<code>&lt;script&gt;</code>","text":"<p>You can write Javascript code here, this tag is usually inside <code>&lt;body&gt;</code> at the ending before <code>&lt;/body&gt;</code> <code>&lt;script&gt;&lt;/script&gt;</code></p>"},{"location":"01-HTML-CSS/#p","title":"<code>&lt;p&gt;</code>","text":"<p>This tag is used for enclosing a paragraph in the webpage.   <code>&lt;p&gt;Your paragraph&lt;/p&gt;</code></p>"},{"location":"01-HTML-CSS/#h1","title":"<code>&lt;h1&gt;</code>","text":"This tag is used for headers/titles on the webpage, and the font size can be modified based on the tag as shown below. <pre><code>&lt;h1&gt;&lt;/h1&gt;  \n&lt;h2&gt;&lt;/h2&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h4&gt;&lt;/h4&gt; \n&lt;!-- You can give smaller header text sizes also, 1 is the biggest and 6 is the smallest --&gt;\n&lt;!-- This is the syntax for a HTML comment --&gt;\n</code></pre>"},{"location":"01-HTML-CSS/#br","title":"<code>&lt;br&gt;</code>","text":"This tag is a new line tag, it does not require a closing tag    <code>&lt;br&gt;</code>"},{"location":"01-HTML-CSS/#img","title":"<code>&lt;img&gt;</code>","text":"This is an image tag, you can specify the path of the image by typing it inside <code>src=\"\"</code>.   <code>&lt;img src=\"/././*.jpg\"&gt; &lt;/img&gt;</code>"},{"location":"01-HTML-CSS/#audio","title":"<code>&lt;audio&gt;</code>","text":"This is an audio tag, if you want to play sounds on the webpage. <code>&lt;audio&gt;&lt;/audio&gt;</code>"},{"location":"01-HTML-CSS/#div","title":"<code>&lt;div&gt;</code>","text":"This is a very commonly used tag, basically if you want create box section.You can place other content inside and the size/colour and other properties can be changed using CSS.     <code>&lt;div&gt;&lt;/div&gt;</code>"},{"location":"01-HTML-CSS/#a-href","title":"<code>&lt;a href=\"\"&gt;</code>","text":"This is link tag which redirects to another website   <code>&lt;a href=\"someotherwebsite.com\"&gt; Click me pls :) &lt;/a&gt;</code>"},{"location":"01-HTML-CSS/#form","title":"<code>&lt;form&gt;</code>","text":"This tag is used for denoting forms (signup/login/other)    <code>&lt;form&gt;&lt;/form&gt;</code>"},{"location":"01-HTML-CSS/#input","title":"<code>&lt;input&gt;</code>","text":"This tag is used to create an \"input text\" field (usually inside a form, or maybe a search bar)   <code>&lt;input&gt;&lt;/input&gt;</code>"},{"location":"01-HTML-CSS/#button","title":"<code>&lt;button&gt;</code>","text":"This tag is used to create a button   <code>&lt;button&gt;Click Here!&lt;/button&gt;</code>"},{"location":"01-HTML-CSS/#ul","title":"<code>&lt;ul&gt;</code>","text":"The <code>&lt;ul&gt;</code> tag stands for unordered list, the <code>&lt;li&gt;</code> element signifies a list item inside the UL. <pre><code>&lt;ul&gt;          \n  &lt;li&gt;List Item 1&lt;/li&gt;  \n  &lt;li&gt;List Item 2&lt;/li&gt;\n  ..\n&lt;/ul&gt;\n</code></pre>"},{"location":"01-HTML-CSS/#html-tables","title":"HTML Tables","text":"<p>You can create tables in HTML using the <code>&lt;table&gt;</code> tag.  * For each row inside a table, you need to include a <code>&lt;tr&gt;&lt;/tr&gt;</code>(tr= Table Row) tag. * For each column element inside a row, <code>&lt;td&gt;</code> (td= Table Data) tag is used.  * If you also want to add table header, then you can make another row at the beginning which consists of <code>&lt;th&gt;</code>(Table Header) tags.  </p> <p>Let's look at an example: <pre><code>    &lt;body&gt;\n        &lt;table &gt;\n            &lt;tr&gt; &lt;th&gt;Column 1&lt;/th&gt; &lt;th&gt;Column 2&lt;/th&gt; &lt;th&gt;Column 3&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt; &lt;td&gt;R1C1&lt;/td&gt; &lt;td&gt;R1C2&lt;/td&gt; &lt;td&gt;R1C3&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt; &lt;td&gt;R2C1&lt;/td&gt; &lt;td&gt;R2C2&lt;/td&gt; &lt;td&gt;R2C3&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt; \n        &lt;!-- Here R1C1 means Row 1 column 1 --&gt;   \n        &lt;!-- &lt;table&gt;&lt;/table&gt; is usually included inside &lt;body&gt;&lt;/body&gt; tag --&gt;\n    &lt;/body&gt;\n</code></pre> <pre><code>&lt;!-- P.S you would also need to paste this inside &lt;head&gt;&lt;/head&gt; for proper formatting --&gt;\n&lt;style&gt; \n\n    table, th, td {\n      border: 1px solid black;\n      border-collapse: collapse;\n    }\n\n&lt;/style&gt;\n</code></pre></p>  Output of the above code"},{"location":"01-HTML-CSS/#semantic-html","title":"Semantic HTML","text":"<p>A Semantic Element in an HTML tag which clearly denotes the position/content which it will hold.</p> <p>For example, * Elements such as <code>&lt;form&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;article&gt;</code> clearly indicate that they contain a form, table and article. (Indicate Content) * A <code>&lt;header&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;footer&gt;</code>,<code>&lt;section&gt;</code>,<code>&lt;aside&gt;</code> tag are used to indicate the position they will occupy in the webpage, as shown in the below image.(Indicate Position) * Non-semantic elements such as <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> tell us nothing about its content or position from the name.</p> <p></p> <p></p> Unfortunately Chandler still doesn't know the semantics of his life"},{"location":"01-HTML-CSS/#intro-to-css","title":"Intro to CSS","text":"<p>Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable.  * CSS allows you to apply styles to web pages. More importantly, CSS enables you to do this independent of the HTML that makes up each web page.  * It describes how a webpage should look: it prescribes colors, fonts, spacing, and much more. You can make your website look however you want, given you know how to use CSS well. * CSS lets developers and designers define how it behaves, including how elements are positioned in the browser. </p> <p>Let's take a look at some syntax of CSS. <pre><code>/* This is a CSS comment */\nh1{  /* Here, the h1 part is called selector since it selects only the h1 html tags and applies these properties.*/\n    color:blue;\n    size:12px;\n    background-color:red;\n/* The curly braces part is called the declaration.*/\n}\n</code></pre></p>"},{"location":"01-HTML-CSS/#different-ways-to-link-css-with-html","title":"Different ways to link CSS with HTML","text":"<p>There are three ways to link a CSS file with HTML: </p>"},{"location":"01-HTML-CSS/#external-css","title":"External CSS:","text":"<p>When we talk of external CSS, we have our CSS stylesheet stored in a different file than the HTML file.    To use the CSS style sheet, each HTML page must include a reference to the external style sheet file inside the  element, inside the head section, for e.g.   <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"mystyle.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;This is a heading&lt;/h1&gt;\n        &lt;p&gt;This is a paragraph.&lt;/p&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"01-HTML-CSS/#internal-css","title":"Internal CSS:","text":"<p>An internal CSS stylesheet may be used if the design and colours of the stylesheet are unique to that specific HTML file, i.e it doesn't need to be shared among other HTML pages. The internal CSS is defined inside of the <code>&lt;style&gt;</code> tag, inside the <code>&lt;head&gt;</code> section. It is basically copying an entire css file and pasting inside <code>&lt;style&gt;&lt;/style&gt;</code> tags, for e.g.   <pre><code>&lt;head&gt;\n&lt;style&gt;\nbody {\n  background-color: linen;\n}\n\nh1 {\n  color: maroon;\n  margin-left: 40px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre></p>"},{"location":"01-HTML-CSS/#inline-css","title":"Inline CSS:","text":"An inline CSS style is applied when we want to apply a unique style to a single element on a webpage. This can be done using the <code>style</code> property within a tag and specifying the properties in that.   <pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1 style=\"color:blue;text-align:center;\"&gt;This is a heading&lt;/h1&gt;\n&lt;p style=\"color:red;\"&gt;This is a paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"01-HTML-CSS/#css-selectors-and-visual-rules","title":"CSS Selectors and Visual rules","text":"<p>CSS selectors are used to \"find\" (or select) the HTML elements you want to style. </p> <p>There are a few ways in which you can use CSS selectors:</p> <ul> <li> <p>Simple selectors: Using Simple Selectors you can select HTML elements based on their name, id or class. For e.g.   <pre><code>p {   /*Here, all &lt;p&gt; elements on the page will be center-aligned, with a red text color */\n  text-align: center;\n  color: red;\n}\n\n#para1 {\n/* The CSS rule below will be applied to the HTML element with id=\"para1\"  */\n  text-align: center;\n  color: red;\n}\n.center {\n/*all HTML elements with class=\"center\" will be red and center-aligned*/   \n  text-align: center;\n  color: red;\n}\n</code></pre></p> </li> <li> <p>Combinator selectors: Using this method, you can select HTML elements based on a defined relationship between elements, for example child of an element, adjacent to an element, etc.   Here are a few types of Combinator selector: </p> <ul> <li> <p>Descendant Selector This snippet selects all <code>&lt;p&gt;</code> elements inside <code>&lt;div&gt;</code> elements    <pre><code>div p {\n  background-color: yellow;\n}\n</code></pre></p> </li> <li> <p>Child Selector This snippet selects all <code>&lt;p&gt;</code> elements that are children of a <code>&lt;div&gt;</code> element   <pre><code>div &gt; p {\n    background-color: yellow;\n}\n</code></pre></p> </li> <li> <p>Adjacent Sibling selector Sibling elements must have the same parent element, and \"adjacent\" means \"immediately following\" The below rule selects the first <code>&lt;p&gt;</code> element that are placed immediately after <code>&lt;div&gt;</code> elements   <pre><code>div + p {\n  background-color: yellow;\n}\n</code></pre></p> </li> <li> <p>General Sibling Selector The general sibling selector selects all elements that are next siblings of a specified element. The below rule selects all <code>&lt;p&gt;</code> elements that are next siblings of <code>&lt;div&gt;</code> elements    <pre><code>div ~ p {   \n    background-color: yellow;\n}\n</code></pre></p> </li> </ul> </li> </ul> <p>Now moving on to CSS Visual Rules, these are basically the rules which we write inside the declaration part <code>{}</code> of the rules in a CSS Stylesheet. Let's look at some basic CSS rules to get started (there are many more than given in this snippet):</p>"},{"location":"01-HTML-CSS/#example-syntax-p-font-size-30px-background-color-blue-width-200px-important-opacity-05-background-image-urlresourcesnyancatpng","title":"<pre><code>/* Example syntax*/\np{\n  font-size: 30px;   \n  background-color: blue; \n  width: 200px !important; \n  opacity: 0.5;\n  background-image: url(\"../resources/nyancat.png\"); \n}\n</code></pre>","text":""},{"location":"01-HTML-CSS/#colors","title":"Colors","text":"<p>You can define colors as either RGB, HEX (hexadecimal), or HSL (Hue, Saturation, Lightness) values.</p> <ul> <li> <p>RGB Colors:   RGB colors can be defined in CSS like the following <code>color: rgb(red, green, blue)</code>. Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255.   For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0.   To display black, set all color parameters to 0, like this: <code>rgb(0, 0, 0)</code>.   To display white, set all color parameters to 255, like this: <code>rgb(255, 255, 255)</code>.   You can also have an additional parameter 'alpha' which will decide the transparency/ opacity of the color, and it ranges from 0.0 to 1.0 <code>rgb(222, 100, 234, 0.5)</code> <pre><code>color: rgb(255,0,0); /* Red */\ncolor: rgb(0, 0, 255); /* Blue */\ncolor: rgb(106, 90, 205); /* Indigo */\ncolor: rgb(106, 90, 205, 0.1); /* Indigo, more transparent */\ncolor: rgb(106, 90, 205, 0.7); /* Indigo, more opaque */\n</code></pre></p> </li> <li> <p>HEX colors:    A hexadecimal color is specified with: <code>#RRGGBB</code>, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color.   Each of fields of red, green, and blue can have value from 00 in hexadecimal (decimal 0) to FF in hexadecimal(decimal 255). Similar to the RGB colors, where (255,255,255) represents white, in hex #FFFFFF represents white.   <pre><code>  background-color: #ffffff; /* Black */\n  background-color : #000000; /* White */\n  background-color: #00ff00; /* Green */\n  background-color: #ff0000; /* Red */\n  background-color: #0000ff; /* Blue */\n</code></pre></p> </li> <li> <p>HSL colors:    A color can be specified using hue, saturation, and lightness (HSL) in the form: <code>hsl(hue, saturation, lightness)</code> Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue. Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color. Lightness is also a percentage, 0% is black, 50% is neither light or dark, 100% is white   <pre><code>color: hsl(0, 100%, 50%); /*Red */\ncolor: hsl(240, 100%, 50%); /*Blue */\ncolor: hsl(39, 100%, 50%); /* Golden */\ncolor: hsl(274.6, 100%, 25.5%); /* Indigo */\n</code></pre></p> </li> </ul>"},{"location":"01-HTML-CSS/#css-positioning","title":"CSS Positioning","text":"<p>CSS positioning refers to how an element is positioned in a document.  * The <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties which refer to the distance in each respective direction from the window or other elements determine the final location of positioned elements. </p> <p>There are a few types of positioning in CSS:</p> <ul> <li>Static Positioning:    The element is positioned according to the normal flow of the document. The <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, and <code>z-index</code> properties have no effect.This means that the element will appear in the same order as it is mentioned in the HTML document, and will take up the closest space availible.  This is the default value (we usually need to change this).   <pre><code>h1 {\n  position: static;\n}\n</code></pre></li> <li>Relative Positioning:   The element is positioned according to the normal flow of the document, and then offset relative to it's position in a <code>static</code>(default position) based on the values of <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were <code>static</code>.   <pre><code>h1{\n  position: static;\n}\nh2{\n  position: relative;\n  top: 40px;\n  left: 40px;\n}\nh3{\n  position: static;\n}\n/* Here, only the h2 element position will be changed by 40px downwards and  40 px right*/\n/* relative to its default position. The other elements are unaffected*/\n</code></pre></li> <li>Absolute Positioning:    Using absolute positioning, an element is positioned relative to its parent container, if any, otherwise, it is placed relative to the screen (initial containing block). We can also use <code>position: fixed</code> to directly position the element w.r.t the screen (initial containing block)   <pre><code>.parentdiv{\n  background-color: 'red';\n}\nh1{\n  position: absolute;\n  top: 40px;\n  left: 40px;\n}\n/* Here, h1 is present inside a div with class name 'parentdiv'. */ \n/*The h1 element is positioned with respect to the boundaries of the parentdiv and not its sibling elements. */\n</code></pre></li> </ul>"},{"location":"01-HTML-CSS/#css-typography","title":"CSS Typography","text":"<p>CSS typography relates to the style, spacing, and proportions of text on a website.  * Good typography can greatly improve a site's user experience, and the readability of the text,allowing users to grasp the meaning of the text quicker, and makes it more aesthetic. </p> <p>There are a few properties relating to typography in CSS:</p> <ul> <li> <p>Color:   You can set the color of text by using the <code>color</code> property. It can hold values of type RGB, RGBA, HSL or HEX values (as discussed earlier)</p> </li> <li> <p>Font Family:    You can use the <code>font-family</code> property to set which font the text will be using. You can also set multiple fonts to a text, so if the browser was not able to load the first font, then it will use the next font, and so on.   <pre><code>.text1 {\n    font-family: \"Source Sans Pro\", \"Arial\", \"sans-serif\";\n    /* The browser will use Arial if Source Sans is not availible, else sans-serif if Arial is not availible either */\n}\n/* sans-serif font. */\n.text2 {\n    font-family: \"sans-serif\";\n}\n</code></pre></p> </li> <li> <p>Font Size:    You can control the font size of your text using the <code>font-size</code> property. Here's an example of how to use <code>font-size</code>:   <pre><code>/* The text will use the browser's default medium size. */\n.text1 {\n    font-size: medium;\n}\n</code></pre> <code>font size</code> can also have various units such as using pixel values:<code>font-size: 20px;</code>, You can use em values. <code>em</code> means that the value is relative to the parent's font-size :<code>font-size: 1.2em;</code>, you can also use percentage:<code>font-size: 90%;</code>, relative keywords:<code>font-size: smaller;</code>, or absolute keywords like large, x-large, etc.<code>font-size: x-large;</code></p> </li> <li> <p>Font Weight:   You can choose the font weight by using the <code>font-weight</code> property. It can store values like <code>normal</code>,<code>bold</code>, or numerical values like <code>600</code>, <code>800</code>, etc.   <pre><code>.text1 {\n    font-size: x-large;\n    font-weight: normal;\n}\n/* BOLD text. */\n.text2 {\n    font-size: x-large;\n    font-weight: bold;\n}\n/* using a numerical value for the weight */\n.text3 {\n    font-size: x-large;\n    font-weight: 800;\n}\n</code></pre></p> </li> <li> <p>Font Style:    You can choose the Italics of the text using the <code>font-style</code> property. It can store values like <code>normal</code>, <code>italic</code>, or <code>oblique</code>.   <pre><code>body {\n\n}\n.text1 {\n    font-style: normal;\n  /* font-style can also hold values \"italic\" and \"oblique\" */\n}\n</code></pre></p> </li> <li> <p>Text Align and Decoration:    You can set the alignment of the text using <code>text-align</code> property, or underline/ strikethrough the text using <code>text-decoration</code> property .   <pre><code>.text1 {\n    font-size: large;\n    text-align: left;\n    /* Text align can also hold values: right, center, justify */\n}\n.text5 {\n    font-size: large;\n    text-decoration: underline;\n}\n</code></pre></p> </li> </ul>"},{"location":"01-HTML-CSS/#css-grids","title":"CSS Grids","text":"<p>The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.   The Grid layout consists of a parent <code>grid container</code> element and any number of child <code>grid items</code>. These grid items are placed inside the columns and rows of the grid container.</p> <ul> <li> <p>Grid Container:    You can set any element as a grid container, but it must have the property of <code>display: grid;</code> or <code>display: inline-grid</code>. We use the <code>grid-template-columns</code> to set the number and width of the columns and similiarly <code>grid-template-rows</code> for rows.   <pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: 80px 200px auto 40px;\n  /* Represents 4 columns, with width of 80px,200px, auto and 40px.*/\n  /* The width can be set to auto to make it evenly spaced*/\n  grid-template-rows: 80px 200px;\n/* Represents 2 rows of 80px and 200px height. */\n}\n/* In this manner, we can define the dimensions of the grid. */\n</code></pre></p> </li> <li> <p>Grid Item:</p> <p>A grid container contains grid items.  * By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.  * Using the <code>grid-column</code> property on a grid item element, we specify which column the element will start and which column it will end, and vice versa for the <code>grid-row</code> property.    <pre><code>.item1 {\n  grid-column: 1 / 5;\n  /* Item starts on column  1 and ends before column 5. */\n}\n\n.item2 {\n  grid-column: 1 / span 3;\n  /* Make \"item2\" start on column 1 and span 3 columns */\n}\n.item3 {\n  grid-column: 2 / span 3;\n    /* Make \"item3\" start on column 2 and span 3 columns */\n}\n.item4 {\n  grid-row: 1 / 4;\n  /* Make \"item4\" start on row-line 1 and end on row-line 4 */\n}\n.item5 {\n  grid-row: 1 / span 2;\n/* Make \"item5\" start on row 1 and span 2 rows*/\n}\n</code></pre></p> </li> </ul>"},{"location":"01-HTML-CSS/#css-flexbox","title":"CSS Flexbox","text":"<p>CSS Flexbox (Flexible Layout) aims at providing a more efficient way to lay out, align and distribute space among items in a container even when the size is unknown or dynamically changing.  * The flexbox design consists of two parts: A parent flexbox container, and the flexbox items inside the parent container. There are various properties for both flexbox container and flexbox items, which can be customised as per user needs. </p> <ul> <li> <p>Flexbox Container:   The flexbox container is the parent element which will hold the inner flexbox items. Any HTML element can be set as a flexbox container by setting <code>display:flex;</code> inside the CSS class rules.    The properties for flex container are :</p> <ul> <li><code>flex-direction</code>: The <code>flex-direction</code> property defines in which direction the container wants to stack the flex items.   <pre><code>    .flex-container {\n  display: flex;\n  flex-direction: column;\n  /* The column value stacks the flex items vertically (from top to bottom)*/\n/* flex-direction can hold values \"column\", \"column-reverse\", \"row\", \"row-reverse\" */\n}\n</code></pre></li> <li><code>flex-wrap</code>   The <code>flex-wrap</code> property specifies whether the flex items should wrap or not.  <pre><code>  .flex-container {\n  display: flex;\n  flex-wrap: wrap;\n}\n</code></pre></li> <li><code>flex-flow</code>   The <code>flex-flow</code> property is a shorthand property for setting both the flex-direction and flex-wrap properties. <pre><code>    .flex-container {\n  display: flex;\n  flex-flow: row wrap;\n}\n</code></pre></li> <li><code>justify-content</code>   The <code>justify-content</code> property is used to align the flex items    The center value aligns the flex items at the center of the container. It can also have values flex-start and flex end for left and right alignn respectively. <pre><code>  .flex-container {\n  display: flex;\n  justify-content: center;\n}\n</code></pre></li> <li><code>align-items</code>   The <code>align-items</code> property is used to align the flex items (vertically i.e top-bottom).It can have values flex-start, flex-end, stretch, or center. <pre><code>  .flex-container {\n  display: flex;\n  height: 200px;\n  align-items: center;\n}\n</code></pre></li> </ul> </li> <li> <p>Flexbox Items   The child divs inside a div assigned as flex container become the flexbox items. We can change the way flexbox items behave or are arranged inside a flexbox container by changing properties such as </p> <ul> <li><code>align-self</code> Specifies the alignment for a flex item (overrides the flex container's align-items property)   <pre><code>  &lt;div class=\"flex-container\"&gt;\n  &lt;div&gt;1&lt;/div&gt;\n  &lt;div&gt;2&lt;/div&gt;\n  &lt;div style=\"align-self: center\"&gt;3&lt;/div&gt;  /*This div is aligned vertically in the center */\n  &lt;div&gt;4&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> <li><code>order</code>   The order property specifies the order of the flex items.You can arrange the items in any order by setting the order property. <pre><code>&lt;div class=\"flex-container\"&gt;\n&lt;div style=\"order: 3\"&gt;1&lt;/div&gt;\n&lt;div style=\"order: 2\"&gt;2&lt;/div&gt;\n&lt;div style=\"order: 4\"&gt;3&lt;/div&gt;\n&lt;div style=\"order: 1\"&gt;4&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> <li><code>flex-grow</code>   The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items. <pre><code>&lt;div class=\"flex-container\"&gt;\n&lt;div style=\"flex-grow: 1\"&gt;1&lt;/div&gt;\n&lt;div style=\"flex-grow: 1\"&gt;2&lt;/div&gt;\n&lt;div style=\"flex-grow: 8\"&gt;3&lt;/div&gt;  /*Makes the third flex item grow eight times faster than the other flex items*/\n&lt;/div&gt;\n</code></pre></li> <li><code>flex-shrink</code> Similiarly, we can use the <code>flex-shrink</code> property to set how fast an item will shrink w.r.t. other items.   If it is set to 0, an item will not shrink</li> <li><code>flex-basis</code>   The flex-basis property specifies the initial length of a flex item. <pre><code>&lt;div class=\"flex-container\"&gt;\n&lt;div&gt;1&lt;/div&gt;\n&lt;div&gt;2&lt;/div&gt;\n&lt;div style=\"flex-basis: 200px\"&gt;3&lt;/div&gt;\n&lt;div&gt;4&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> <li><code>flex</code>   The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties. <pre><code>&lt;div class=\"flex-container\"&gt;\n&lt;div&gt;1&lt;/div&gt;\n&lt;div&gt;2&lt;/div&gt;\n/* Make the third flex item not growable (0), not shrinkable (0), and with an initial length of 200 pixels */\n&lt;div style=\"flex: 0 0 200px\"&gt;3&lt;/div&gt;\n&lt;div&gt;4&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> Using CSS proficiently will give you a modern, beautiful and clean website design. </li> </ul> </li> </ul>"},{"location":"01-HTML-CSS/#how-to-use-devtools","title":"How to use DevTools","text":"<p>Browser Developer Tools (DevTools) is a menu option on your browser which can be used for inspection, debugging, or making minor changes in the code.There is also a console which can be referred to for error outputs (if any). </p> <p>Let's look at how to use it.</p> <ul> <li>How to open it?   You can open it by pressing <code>Ctrl+Shift+I</code> on Windows, or <code>\u2318 + \u2325 + I</code> on MacOS. You can also right click on any part of a webpage and choose <code>Inspect</code> to open Devtools.</li> <li>DOM Inspector   The developer tools usually open by default to the DOM Inspector, which looks something like the following screenshot.    This tool can:</li> <li>Show what the HTML on your page looks like at runtime, as well as what CSS is applied to each element on the page. </li> <li>Allows you to instantly modify the HTML and CSS and see the results of your changes reflected live in the browser viewport.</li> <li>You can modify HTML on the left pane, and CSS on the right side <code>styles</code> pane. The target element is highlighted (as shown below).  </li> </ul> <p></p> <p>   On top of the right CSS pane you also see a few other tabs.   - Computed : It's functions are:     * Shows the computed styles for the currently selected element (the final, normalized values that the browser applies).      * It has a <code>box model</code> which represents visually the current element's box model, so you can see at a glance what padding, border and margin is applied to it, and how big its content is.      * Additionally, Fonts tab which shows the fonts applied to the current element.</p> <ul> <li>Layout:   If the page you are inspecting uses CSS Grid, this section allows you to view the grid details.</li> <li>Sources/Debugger:   The JavaScript debugger allows you to watch the value of variables and set breakpoints, places in your code that you want to pause execution and identify the problems that prevent your code from executing properly.  </li> </ul> <p>   You can set a breakpoint by clicking on the line number (for example a breakpoint has been set by clicking on 19 in the above image.)   Once the breakpoint is set, the code executes and pauses at a breakpoint, and you can check the values of various variables at that line, and then restart the execution. - Console:    The JavaScript console is an incredibly useful tool for debugging JavaScript that isn't working as expected.    It's functions are:     * Allows you to run lines of JavaScript against the page currently loaded in the browser, and reports the errors encountered as the browser tries to execute your code.     * You can <code>console.log()</code> any variable values or messages that you want to check in your code, and they will appear here.   </p> <p>To summarise, here are the topics we learnt today:</p> <ul> <li> Intro to Web-Dev</li> <li> Languages (HTML/CSS/JS/SQL)</li> <li> Tags (h, p, b, div, span, etc.)</li> <li> HTML Tables</li> <li> Semantic HTML</li> <li> Intro to CSS</li> <li> Different methods to link CSS with HTML</li> <li> Selectors and Visual Rules</li> <li> \"How to use Dev Tools?\"</li> <li> Colors</li> <li> Position (absolute, relative, fixed)</li> <li> Typography</li> <li> Grid</li> <li> Flexbox</li> <li> Forms</li> <li> How to use DevTools?</li> </ul> We hope you learnt a lot!! <p></p>"},{"location":"02-JavaScript-1/","title":"2: JavaScript (Basics)","text":"<p>Javascript Session 1</p>"},{"location":"02-JavaScript-1/#section-01-operators","title":"Section 01. Operators","text":""},{"location":"02-JavaScript-1/#0101-what-is-the-operator","title":"01.01. What is the Operator?","text":"<ul> <li>We know/use many operators since our initial school days, they are things like addition +, multiplication *, subtraction -, open-close round bracket ( ) or square bracket [ ]</li> <li>Operators are symbols/keywords that tell the JavaScript engine to <code>perform some sort of actions</code></li> <li>JavaScript operators are symbols that are used to perform operations on operands</li> <li>Operators used along with our variables and constants to create expressions to implement logic and algorithms</li> </ul> <p>Note:  Let us take a simple expression <code>var sum = 1 + 2</code>; - Here 1 and 2 are called <code>operands</code> and  - <code>=</code> &amp; <code>+</code> are called the <code>operator</code> - <code>= is the assignment</code> operator, <code>+ is the arithmetic</code> operator</p> <p>Syntax &amp; Example <pre><code>// Lets take a look on simple expression \nvar sum = 1 + 2;\n\n// Here 1 and 2 are called `operands` and \n// `=` &amp; `+` are called the `operator`\n// `= is the assignment` operator, `+ is the arithmetic` operator\n</code></pre></p> <p>JavaScript supports the following types of operators: 1. Arithmetic Operators 2. Assignment Operators 3. Logical Operators 4. Comparison (or Relational) Operators 5. Conditional (or ternary) Operators 6. String Operators 7. Bitwise Operators</p>"},{"location":"02-JavaScript-1/#0102-arithmetic-operators","title":"01.02. Arithmetic Operators","text":"<ul> <li>Arithmetic operators are used to performing arithmetic operations (just like mathematics - calculations) on numbers/the operands</li> </ul> <p>JavaScript supports the following Arithmetic operators (List of Arithmetic operators):</p> Operators Description Example / Result + Addition 10 + 20 = 30 (Sum of num1 and num2) - Subtraction 20 - 10 = 10 (Difference of num1 and num2) * Multiplication 10 * 20 = 200 (Product of num1 and num2) / Division 20 / 10 = 2 (Quotient of num1 and num2) % Modulus (Division Remainder) 20 % 10 = 0 (Remainder of num1 divided by num2) ++ Increment var num1 = 100; num1++; Now num1 = 11 -- Decrement var num1 = 100; num1--; Now num1 = 9 ** Exponentiation (ES2016 / ES6) 2 ** 2 = 4 ; 2 ** 3 = 8 (Multiply num1 for num2 times) <p>Syntax &amp; Example <pre><code>// Arithmetic operators\nvar num1 = 10;\nvar num2 = 4;\n\nalert('Addition ' + (num1 + num2)); // 14\nalert('Subtraction ' + (num1 - num2)); // 6\nalert('Multiplication ' + num1 * num2); // 40\nalert('Division ' + num1 / num2); // 2.5\nalert('Modulus reminder ' + num1 % num2); // 2\nnum1++\nalert('after Increment ' + num1); // 11\nnum2--; \nalert('after Decrement ' + num2); // 3\n\nnum1 = 10;\nnum2 = 4;\nalert('Exponentiation ' + (num1 ** num2)); // (10 ** 4) = 10* 10 * 10 * 10 = 10000\n</code></pre></p>"},{"location":"02-JavaScript-1/#0103-assignment-operators","title":"01.03. Assignment Operators","text":"<ul> <li>The Assignment operators are used to assign particular values to variables</li> </ul> <p>JavaScript supports the following Assignment operators (List of Assignment operators):</p> Operators Description Example / Result = Simple Assignment 10 + 20 = 30; / var total = num1 + num2; (assigns a value to the variable) += Add and assign var num1 = 10; num1 += 20; Now num1 = 30 (assigns and adds value to the variable, num1 += 20; is equivalent to num1 = num1 + 20;) -= Subtract and assign var num1 = 10; num1 -= 5; Now num1 = 5 (assigns and subtract value to the variable, num1 -= 5; is equivalent to num1 = num1 - 5;) *= Multiply and assign var num1 = 10; num1 = 5; Now num1 = 50 (assigns and multiply value to variable, num1 = 5; is equivalent to num1 = num1 * 5;) /= Divide and assign var num1 = 10; num1 /= 5; Now num1 = 2 (assigns and divide value to the variable, num1 /= 5; is equivalent to num1 = num1 / 5;) %= Modulus and assign var num1 = 10; num1 %= 5; Now num1 = 0 (assigns and Modulus value to the variable, num1 %= 5; is equivalent to num1 = num1 % 5;) <p>Syntax &amp; Example <pre><code>// Assignment operators\nvar num1 = 10;\nvar num2 = 20\n\n// old methodology\n// num1 = num1 + num2;\n// console.log(num1); // 30\n\n// new techniques\nnum1 += num2; \nconsole.log(num1); // 30\n\n// num2 -= num1; \n// console.log(num2); // 10\n\n// num1 *= num2; \n// console.log(num1); // 200\n\n// num2 /= num1; \n// console.log(num2); // 2\n</code></pre></p>"},{"location":"02-JavaScript-1/#0104-logical-operators","title":"01.04. Logical Operators","text":"<ul> <li>The Logical operators are used to make decisions based on multiple conditions</li> <li>The logical operators are typically used to combine multiple conditional statements and evaluate</li> </ul> <p>JavaScript supports the following Logical operators (List of Logical operators):</p> Operators Description Example / Result &amp;&amp; Logical AND x &amp;&amp; y; (True if both operands like x and y are true) || Logical OR x || y; (True if either x or y is true) ! Logical NOT !x; (True if x is not true) <p>Syntax &amp; Example <pre><code>// Logical operators - basic examples\n\n// &amp;&amp; (Logical AND) - returns true if both operands are true\nconsole.log('true &amp;&amp; true: ', true &amp;&amp; true);\nconsole.log('true &amp;&amp; false: ', true &amp;&amp; false);\nconsole.log('false &amp;&amp; true: ', false &amp;&amp; true);\n\n// ------------------------------\n\n// || (Logical OR) - returns true if one of the operand is true\nconsole.log('true || true: ', true || true);\nconsole.log('true || false: ', true || false);\nconsole.log('false || true: ', false || true);\n\n// ------------------------------\n\n// ! (Logical NOT) True if operand is not true (means I will be true if other is false)\nvar iamcrazy = true;\n\nvar iamnotcrazy = !iamcrazy;\nconsole.log('I am crazy?: ', iamnotcrazy);\nconsole.log('My mother had me tested');\n</code></pre></p> <p> </p> <p>Syntax &amp; Example <pre><code>// Logical operators - real world scenario/example\n\n// check credit/loan eligibility - (if applicant have HIGH INCOME &amp; GOOD CREDIT SCORE, he is eligible for credit/loan)\nvar isEarningHighIncome = true;\nvar isGoodCibilScore = false;\nvar isEligibleForLoan;\n\n// check eligibility with &amp;&amp; Logical AND operator\nisEligibleForLoan = isEarningHighIncome &amp;&amp; isGoodCibilScore;\nalert('isEligibleForLoan: ' + isEligibleForLoan);\n\n// check eligibility with || Logical OR operator\nisEligibleForLoan = isEarningHighIncome || isGoodCibilScore;\nalert('isEligibleForLoan: ' + isEligibleForLoan);\n\n// ! Logical NOT\nvar isLoanRefused = !isEligibleForLoan;\nalert('isLoanRefused: ' + isLoanRefused);\n</code></pre></p>"},{"location":"02-JavaScript-1/#0105-comparison-or-relational-operators","title":"01.05. Comparison (or Relational) Operators","text":"<ul> <li>The JavaScript comparison operator compares the two operands</li> <li>It compares two values in a Boolean fashion</li> <li>The comparison operators are used to determine the similarity and difference between different variables</li> </ul> <p>JavaScript supports the following Comparison (or Relational) operators (List of Comparison (or Relational) operators):</p> Operators Description Example / Result ==  (Loose Equality Operator) Is equal to / identical x == y    (True if x is equal to y) === (Strict Equality Operator) Eqaul/identical value and identical type x === y (True if x is equal to y, and they are of the same type) != Not equal to / different x != y (True if x is not equal to y) !== Not identical    / different value or different type x !== y )True if x is not equal to y, or they are not of the same type) &lt; Less than x &lt; y (True if x is less than y) &gt; Greater than x &gt; y    (True if x is greater than y) &lt;= Less than or equal to x &lt;= y (True if x is less than or equal to y) &gt;= Greater than or equal to x &gt;= y (True if x is greater than or equal to y) <p>Syntax &amp; Example <pre><code>// Comparison (or Relational) operators\nvar num1 = 25;\nvar num2 = 35;\nvar num3 = \"25\";\n\nalert(num1 == num3);  // true\nalert(num1 === num3); // false\nalert(num1 != num2);  // true\nalert(num1 !== num3); // true\nalert(num1 &lt; num2);   // true\nalert(num1 &gt; num2);   // false\nalert(num1 &lt;= num2);  // true\nalert(num1 &gt;= num2);  // false\n</code></pre></p>"},{"location":"02-JavaScript-1/#0106-conditional-or-ternary-operator","title":"01.06. Conditional (? or ternary) Operator","text":"<ul> <li>Conditional Operator returns a value based on the condition, it is like if-else</li> <li>The conditional (ternary) operator is the only JavaScript operator that takes three operands </li> <li>The conditional operator that assigns a value to a variable based on some condition</li> <li>This operator is frequently used as a shortcut/short-hand method for the if statement</li> <li>Syntax: variablename = (condition) ? TRUE value: FALSE value </li> </ul> Operators Description Example / Result ? Ternary operator var result = x &lt; y ? 'x is smaller' : 'y is smaller' (short hand method to write if condition) <p>Syntax &amp; Example <pre><code>// Conditional (? or ternary) Operator\n\n// age category\nvar currentAge = 100;\nvar category;\n\ncategory = (currentAge &lt; 18) ? 'Minor' : 'Major';\nalert('AGE category: ' + category);\n\n// fees category\nvar isAuthorisedMember = true;\nvar fees;\n\nfees = (isAuthorisedMember == true) ? 5 : 10;\nalert('fees / charges: ' + fees); \n</code></pre></p>"},{"location":"02-JavaScript-1/#0107-string-operators","title":"01.07. String Operators","text":"<p>Variables can also have string values, <code>+ operator</code> can be used to concatenate strings as well as numbers.</p> <p>There are two operators which can also be used be for strings:</p> Operators Description Example / Result + Concatenation string1 + string2 (Concatenation of string1 and string2) += Concatenation assignment string1 += string2 (Appends the str2 to the str1) <p>Syntax &amp; Example <pre><code>// String Operators\nvar message1 = \"Its your birthday!\";\nvar message2 = \" Smile!\";\n\nalert(message1 + message2); \n\nmessage1 += message2;\nalert(message1); \n</code></pre></p> <p> </p>"},{"location":"02-JavaScript-1/#0108-operator-precedence","title":"01.08. Operator precedence","text":"<ul> <li>If an expression has more than one operator, the <code>execution order is defined by their precedence</code>, or the implicit priority order of operators</li> <li>Operator precedence determines/describes the way in which operators are parsed with respect to each other / <code>order in which operations are performed</code></li> <li>The operations inside the <code>parentheses ()</code> are computed first</li> <li>If many operations have the same precedence (like addition and subtraction), they are <code>computed from left to right</code></li> </ul> <p>Syntax &amp; Example <pre><code>// Operator precedence\nvar result1 = 10 + 2 * 5\nalert('10 + 2 * 5 =  ' + result1); // answer is 20 NOT 60 (12 * 5 ), actually * or multiplication have higher precedence so the actual calculation is like 10 + ( 2*5 ) = 10 + 10 = 20\n\n// change precedence with `parentheses ()` \nvar result2 = (10 + 2) * 5;\nalert('(10 + 2) * 5 =  ' + result2); // (12) * 5 = 60\n\n// same precedence operators\nvar result3 = 10 + 5 - 2\nalert('10 + 5 - 2 =  ' + result3); // 13 first addition than subtraction\n\nvar result4 = 10 + (5 - 2);\nalert('10 + (5 - 2) =  ' + result4); // 13 first subtraction ie. ( ) than addition\n</code></pre></p>"},{"location":"02-JavaScript-1/#section-02-functions","title":"Section 02. Functions","text":""},{"location":"02-JavaScript-1/#0201-what-is-a-function","title":"02.01. What is a Function?","text":"<ul> <li>A function is basically a <code>group of statements that perform specific tasks/operations</code></li> <li>Functions provide a way to <code>create reusable code packages</code> which are more portable and easier to debug</li> <li>Functions allow a programmer to <code>divide a big program</code> into a number of/several small and manageable functions</li> <li>It helps programmers in writing <code>modular codes</code></li> <li>The function is a kind of reusable tool where we can write code/functionality to reuse whenever we want (Function allow the code to be called many times without repetition)</li> <li>Wrapping up / making smaller chunks of statements / reusable codes together for readability or separation of concern/proper organization is functions \u2013 (Grouping of a repetitive task)</li> <li>Functions (logical block of code) are one of the most important control structure in any programming language</li> <li>In other languages, it might be called <code>MODULES, SUBROUTINES(SUB-ROUTINES)</code></li> <li>There are two steps to utilize function: </li> <li>create/define a function with <code>function</code> keyword  </li> <li>call/invoke a function</li> </ul> <p>Note:  Best Practice - First Define function than call/envoke it!</p>"},{"location":"02-JavaScript-1/#020101-here-are-some-advantages-of-using-functions","title":"02.01.01. Here are some advantages of using functions:","text":"<ul> <li>Code reusability - call a function several times</li> <li>Less coding - makes our program compact, no need to write lines of code each time</li> <li>Easier to maintain - changes are done only at one location</li> <li>Easier to eliminate the errors - fixing errors becomes much easier</li> </ul>"},{"location":"02-JavaScript-1/#020102-function-definition-function-declaration-creating-function","title":"02.01.02. Function Definition / Function Declaration / Creating Function","text":"<ul> <li>The function declaration starts by using the <code>function keyword</code>, </li> <li>followed by a <code>unique function name</code>, </li> <li>a list of <code>parameters in parentheses</code> i.e. () (that might be empty), </li> <li>and a statement block surrounded by <code>curly braces { }</code></li> </ul> <p>Syntax &amp; Example <pre><code>//1. define / declare / create function\n\nfunction showMessage () {\n  //Body of function \n  //code to be executed\n  console.log('welcome to JavaScript function');\n  alert('welcome to JavaScript function');    \n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#020103-function-invocation-calling-a-function-run-a-function","title":"02.01.03. Function Invocation / Calling a Function / Run a Function","text":"<ul> <li>Defined function can be invoked/called/run from anywhere in the document, by typing <code>function name followed by a set of parentheses, like functionName()</code></li> </ul> <p>Syntax &amp; Example <pre><code>//2. invoke / call the function\n\nshowMessage();\n</code></pre></p>"},{"location":"02-JavaScript-1/#020104-function-naming","title":"02.01.04. Function Naming","text":"<p>Function <code>denotes an action/task</code>. The function name should be <code>brief, as accurate as possible and describe</code> what the function does, like a <code>verb</code>.</p> <p>Usually, Function name starts with:</p> <ul> <li>\"getSomething\" \u2013 returns value,</li> <li>\"createSomething\" \u2013 create something,</li> <li>\"calcSomething\" \u2013 calculate something,</li> <li>\"checkSomething\" \u2013 check something and return a boolean, etc.</li> </ul> <p>Examples of function names: - getSum(); - createFields(); - calcAge(); - checkUserType();</p>"},{"location":"02-JavaScript-1/#0202-types-of-function","title":"02.02. Types of Function","text":"<ul> <li>Regular Function</li> <li>Parameterized Function</li> <li>Return Type Function (Function returning values)</li> </ul>"},{"location":"02-JavaScript-1/#020201-regular-function","title":"02.02.01. Regular Function","text":"<ul> <li>Simple/Normal function which we use daily to perform some action/task</li> </ul> <p>Syntax &amp; Example <pre><code>var food = 'butter';\n\n//1. define / declare / create function\nfunction passButter() {\n  //Body of function \n  //code to be executed\n  console.log('Please pass the ' + food);\n  alert('Please pass the ' + food);    \n}\n\n//2. invoke / call the function\npassButter();\n</code></pre></p>"},{"location":"02-JavaScript-1/#02020201-parameterized-function","title":"02.02.02.01. Parameterized Function","text":"<ul> <li>One can pass data to functions using parameters (function arguments)</li> <li>You can specify parameters when you define your function to accept input values at run time</li> </ul> <p>Syntax &amp; Example <pre><code>// Parameterized function\n//1. define / declare / create function\nfunction passButter(food) {\n  //Body of function \n  //code to be executed\n  console.log('Please pass the ' + food);\n  alert('Please pass the ' + food);    \n}\n\n//2. invoke / call the function\npassButter('butter');\n\npassButter('butter!!!');\n\n// ------------------------------\n\nvar total;\n\nfunction calculateSum (num1, num2) {\n  total = num1 + num2;\n  console.log(total);\n}\n\ncalculateSum(10, 20);\ncalculateSum(100, 200);\n</code></pre></p>"},{"location":"02-JavaScript-1/#02020202-default-values-for-function-parameters-es6","title":"02.02.02.02. Default Values for Function Parameters ES6","text":"<p>With ES6, now you can specify default values to the function parameters. This means that if no arguments are provided to the function when it is called these default parameters values will be used.</p> <p>Syntax &amp; Example <pre><code>// Parameterized function with default parameters\n\n//1. define / declare / create function\nfunction sayHello (name = 'User') {\n  //Body of function \n  //code to be executed\n  console.log('Hello ' + name);\n  alert('Hello ' + name);    \n}\n\n//2. invoke / call the function\nsayHello();\n\nsayHello('Sheldon');\n\n// ------------------------------\n\nvar total;\n\nfunction calculateSum (num1=1, num2=2) {\n  total = num1 + num2;\n  console.log(total);\n}\n\ncalculateSum();\ncalculateSum(100, 200);\n</code></pre></p>"},{"location":"02-JavaScript-1/#020203-return-type-function-function-returning-values","title":"02.02.03. Return Type Function (Function returning values)","text":"<ul> <li>A function can <code>return a value</code> back to the script that called the <code>function, as a result, using the return statement</code></li> <li>We can call a function that returns a value and use it in our program</li> <li>The return statement usually placed as the last line of the function</li> </ul> <p>Syntax &amp; Example <pre><code>// Return type function\n//1. define / declare / create function\nfunction getSum (num1, num2) {\n  //Body of function \n  //code to be executed\n  var sum = num1 + num2;\n  return(sum);\n}\n\n//2. invoke / call the function\nconsole.log(getSum(10,20));\nconsole.log(getSum(100,200));\n\nvar total = getSum(50,50);\nalert(total);\n</code></pre></p>"},{"location":"02-JavaScript-1/#0203-different-ways-to-define-function","title":"02.03. Different ways to define Function","text":"<p>The syntax that we've used before to create functions is called <code>function declaration</code>. There is another syntax for creating a function that is called a <code>function expression</code> and <code>Immediately invoked function expression (IIFE)</code></p>"},{"location":"02-JavaScript-1/#020301-function-declaration-regularnormal-function","title":"02.03.01. function declaration (Regular/Normal function)","text":""},{"location":"02-JavaScript-1/#020302-function-expression","title":"02.03.02. function expression","text":"<ul> <li>Variables contain the expressions of a function</li> <li>Anonymous function expression</li> <li>Named function expression</li> </ul> <p>Syntax &amp; Example <pre><code>// function declaration (Regular / normal function)\nfunction getSum1(num1, num2) {\n  var total = num1 + num2;\n  return total;\n}\n\n// ------------------------------\n\n// function expression - Anonymus\nvar getSum2 = function(num1, num2) {\n    var total = num1 + num2;\n    return total;\n};\n\nalert(getSum2(10,20));\n\n// ------------------------------\n\n// assign function to another variable\nvar sum1 = getSum2;\nalert(sum1(100,200));\n</code></pre></p> <p>Syntax &amp; Example <pre><code>// function expression - named\nvar getSum2 = function getTotal(num1, num2) {\n  var total = num1 + num2;\n  return total;\n};\n\nalert(getSum2(10,20));\n\n// ------------------------------\n\n// assign function to another variable\nvar sum1 = getSum2;\nalert(sum1(5,10));\n</code></pre></p>"},{"location":"02-JavaScript-1/#020303-immediately-invoked-function-expression-iife","title":"02.03.03. Immediately invoked function expression (IIFE)","text":"<ul> <li>It runs as soon as the browser finds it</li> <li>Declare and run the function at the same time</li> </ul> <p>Syntax &amp; Example <pre><code>// Immediately invoked function expression (IIFE)\n(function () {\n  console.log('Welcome to Immediately invoked function expression (IIFE)');\n}());\n\n\n(function(userName) {\n  console.log('Welcome', userName);\n})('Sheldon');\n</code></pre></p>"},{"location":"02-JavaScript-1/#0204-string-methods-and-concatenation","title":"02.04. String Methods and Concatenation","text":"<p>Syntax &amp; Example <pre><code>const firstName = 'Sheldon';\nconst lastName = 'Cooper'\n\nconst fullName = (firstName) + (lastName);\nconsole.log(fullName);\nconsole.log(typeof fullName);\n\n// concatenation\nconsole.log(firstName + ' ' + lastName);\n\nconsole.log('Hello ' + firstName + ' ' + lastName + 'Welcome to JavaScript!');\n\n// append\nlet name1 = 'Sheldon ';\nlet name1 += 'Cooper';\nconsole.log(name1);\n\n// concat() method\nconsole.log(firstName.concat(' ', lastName));\n\n// length\nconsole.log(firstName.length);\n\n// change case\nconsole.log(firstName.toLowercase());\nconsole.log(firstName.toUppercase());\n\n// escaping\n// let statement1 = 'wait I'm coming, that's good';\nlet statement1 = \"wait I'm coming, that's good\";\nlet statement2 = 'wait I\\'m coming, that\\'s good';\n\n// string array - get specific character from string like an array\nconsole.log(firstName[0]);\n\n// indexOf\nconsole.log(firstName.indexOf('i'));\nconsole.log(firstName.lastIndexOf('a'));\n\n// charAt()\nconsole.log(firstName.charAt(2));\n\n// get last character from string\nconsole.log(firstName.charAt(firstName.length - 1));\n\n// replace();\nlet replaceString = ('Sheldon', 'DJ');\nconsole.log('My name is:', replaceString); \n\n// substring();\nconsole.log(firstName.substring(0,4));\n\n// slice();\nconsole.log(firstName.slice(0,4));\n\n// slice(); negative number starts from backside\nconsole.log(firstName.slice(-2));\n\n// includes();\nlet message2 = 'Hello Sheldon, welcome to JavaScript';\nconsole.log(message2.includes('Hello'));\nconsole.log(message2.includes('Hi'));\n\n// split()\nlet message2 = 'Hello Sheldon, welcome, to JavaScript';\nconsole.log(message2.split(','));\nconsole.log(message2.split(' '));\n\nlet courses = 'If I Could, I Would But I Can't So I Shan't';\nconsole.log(courses.split(','));\n</code></pre></p> <p> </p>"},{"location":"02-JavaScript-1/#0205-template-string-and-template-literals","title":"02.05. Template String and Template Literals","text":"<ul> <li>ES6 new feature <code>Strings Template</code> offers a convenient way to work with string concatenation/interpolation</li> <li>Template literals provide an easy and clean way to create multi-line strings and perform string interpolation</li> <li>Intuitive expression interpolation for single-line and multi-line strings</li> <li>Use <code>back-tick (grave accent)</code> character and <code>{ var name in curly brace }</code>, no + plus sign required</li> <li> <p>The best part of Template Literals (Template Strings) is we can <code>use 'single' \"double\" quotes inside</code></p> </li> <li> <p>It is part of ES6 but compatible with all the modern browsers and its latest versions</p> </li> </ul> <p>Syntax &amp; Example <pre><code>//old plain javascript approach\nlet user = 'Sheldon';\nlet greetMessage1 = 'Welcome' + ' ' + user + ' ' + 'to JavaScript.';\n\nconsole.log(greetMessage1);\n\nconsole.log('// ------------------------------');\n\nconst firstName = 'Sheldon';\nconst lastName = 'Cooper'\nconst course = 'JavaScript'\n\nconst fullName = `Hey ${firstName} ${lastName} Welcome to ${course}.`\n\nconsole.log('// ------------------------------');\n\n//ES6 Template Literals (Template Strings) approach\nlet greetMessage2 = `Hello ${firstName}, How are you?`;\n\nconsole.log(greetMessage2);\n\nconsole.log('// ------------------------------');\n// ------------------------------\n\n//ES6 multi-line string\nlet greetMessage3 = `ES6 Template Literals (Template Strings):\n                    With Template Literals (Template Strings)\n                    we can add multiple lines in string concatenation/interpolation\n`;\n\nconsole.log(greetMessage3);\n\nlet greetMessage4 = ES6 Template Literals (Template Strings):\n                    With Template Literals (Template Strings)\n                    we can add multiple lines in string concatenation/interpolation\n;\n\nconsole.log(greetMessage4);\n</code></pre></p>"},{"location":"02-JavaScript-1/#section-03-loops-and-iterations","title":"Section 03. Loops and Iterations","text":"<ul> <li>Loops are used to execute the <code>same block of code again, with a different value, until a certain condition is met</code></li> <li>Loops can execute/repeat a block of code (an action) a number of/several times</li> <li>The basic idea behind a loop is to <code>automate the repetitive tasks within a program to save time and effort</code></li> <li>It makes the <code>code compact</code></li> <li>It is mostly used in array or object (to iterate through series)</li> <li>Loops/iterations is an instruction repeat until a specific condition is reached</li> </ul>"},{"location":"02-JavaScript-1/#different-types-of-loops-in-javascript","title":"Different Types of Loops in JavaScript:","text":"<ol> <li>for loop</li> <li>while loop</li> <li>do...while loop</li> <li>for...in loop</li> <li>for...of loop (ES6)</li> <li>for...each</li> </ol>"},{"location":"02-JavaScript-1/#0301-the-for-loop","title":"03.01. The for loop","text":"<ul> <li>The <code>For</code> loop is used to run a piece of code a <code>set amount of times</code></li> <li>Loops through a block of code until the <code>counter reach a specified number</code></li> <li>The for loop <code>repeats a block of code until a certain condition</code> is met</li> <li>The for loop is the most simple/compact form of looping</li> <li>For loop consists of 3 statements (), mostly <code>i = index</code> is used for loop initialization</li> </ul> <p>Syntax &amp; Example <pre><code>// for loop\n\n/* for (statement 1; statement 2; statement 3) {\n  // Code to be executed\n} */\n\n\n/* for(variable definition/index/initialization; condition checking; increment/decrement expression) {\n  // Code to be executed\n} */\n\nfor (let i=1; i&lt;=5; i++) {\n  alert('Hello, The current index/num is: ' + i);\n  document.write('&lt;li&gt;Hello, The current index/num is: ' + i + '&lt;/li&gt;');\n  console.log('Hello, The current index/num is: ' + i);\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#030101-the-for-loop-reverse-order","title":"03.01.01. The for loop - Reverse order","text":"<p>Syntax &amp; Example <pre><code>// for loop - reverse order\n\nfor (let i = 5; i &gt;= 1; i--) {\n  alert('Hello, The current index/num is: ' + i);\n  document.write('&lt;li&gt;Hello, The current index/num is: ' + i + '&lt;/li&gt;');\n  console.log('Hello, The current index/num is: ' + i);\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#030102-the-for-loop-find-even-or-odd-number","title":"03.01.02. The for loop - Find Even or Odd number","text":"<p>Syntax &amp; Example <pre><code>// for loop - to find out odd even number\n\nfor (let i = 1; i &lt;= 10; i++) {\n  if (i % 2 == 0) {\n    console.log('The current index/num is EVEN : ' + i);\n  } /* else {\n    console.log('The current index/num is ODD : ' + i);\n  } */\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#0302-the-while-loop","title":"03.02. The while loop","text":"<ul> <li>Loops through a block of code until the specified condition evaluates to true</li> <li>In For loop, a variable is part of a loop, but in While loop, we need to declare variable externally</li> </ul> <p>Syntax &amp; Example <pre><code>// while loop\n\n/*while(condition) {\n  // Code to be executed\n}*/\n\nlet i = 1;\n\nwhile (i &lt;= 5) {\n  alert('Hello, The current index/num is: ' + i);\n  document.write('&lt;li&gt;Hello, The current index/num is: ' + i + '&lt;/li&gt;');\n  console.log('Hello, The current index/num is: ' + i);\n  i++;\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#0303-the-do-while-loop","title":"03.03. The do while loop","text":"<ul> <li>The do...while loop is similar to the while loop except that the <code>condition check happens at the end of the loop</code></li> <li>The do...while loop will always be <code>executed at least once (before checking if the condition is true)</code>, even if the condition is false</li> </ul> <p>Syntax &amp; Example <pre><code>// do...while loop\n\n/*do {\n    // Code to be executed\n}\nwhile(condition);*/\n\nlet i = 1;\n\ndo {\n  alert('Hello, The current index/num is: ' + i);\n  document.write('&lt;li&gt;Hello, The current index/num is: ' + i + '&lt;/li&gt;');\n  console.log('Hello, The current index/num is: ' + i);\n  i++;\n}\nwhile (i &lt;= 5); \n</code></pre></p>"},{"location":"02-JavaScript-1/#0304-the-for-in-loop","title":"03.04. The for in loop","text":"<ul> <li>The for-in loop is a special type of a loop that <code>iterates over the properties of an object or the elements of an array</code></li> </ul>"},{"location":"02-JavaScript-1/#030401-the-forin-loop-array","title":"03.04.01. The for...in Loop - array","text":"<p>Syntax &amp; Example <pre><code>// for...in loop\n\n/*for(variable/key in array/object) {\n    // Code to be executed\n}*/\n\n// An array with some elements\nlet air = [\"Nitrogen\", \"Oxygen\", \"Carbon Dioxide\", \"Water Vapour\"];\n\n// Loop through all the elements in the array \nfor (let love in air) {\n  alert('' + air[love] + ' is in the air!');\n  document.write('&lt;li&gt;' + air[love] + ' is in the air!&lt;/li&gt;');\n  console.log('' + air[love] + + ' is in the air!');\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#030402-the-forin-loop-object","title":"03.04.02. The for...in Loop - object","text":"<p>Syntax &amp; Example <pre><code>// for...in loop\n\n/*for(variable/key in array/object) {\n    // Code to be executed\n}*/\n\n// An object with some properties \nlet objEmployee = {'emp_name': 'Sheldon', 'emp_addres': 'Mumbai', 'emp_id': '029', 'emp_age':35};\n\n// Loop through all the properties in the object  \nfor (emp in objEmployee) {\n  alert('Employee '+ emp + ' is: ' + objEmployee[emp]);\n  document.write('&lt;li&gt;Employee '+ emp + ' is: ' + objEmployee[emp] + '&lt;/li&gt;');\n  console.log('Employee '+ emp + ' is: ' + objEmployee[emp]);\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#030403-the-forin-loop-inbuilt-javascript-objects","title":"03.04.03. The for...in Loop - Inbuilt JavaScript objects","text":"<p>Syntax &amp; Example <pre><code>// for...in loop\n\n/*for(variable/key in array/object) {\n    // Code to be executed\n}*/\n\n// Loop through all the properties in the inbuilt object - window, document, navigator\nfor (props in window) {\n  // alert('document object properties ' + props);\n  document.write('&lt;li&gt;document object properties ' + props + '&lt;/li&gt;');\n  console.log('document object properties ' + props);\n}\n</code></pre></p>"},{"location":"02-JavaScript-1/#0305-the-for-of-loop","title":"03.05. The for of loop","text":"<ul> <li>Loops over <code>iterable objects such as arrays, strings</code>, etc.</li> <li>ES6 introduces a new for-of loop which allows us to iterate over arrays or strings very easily</li> <li>The code inside the loop is executed for each element of the iterable object</li> </ul> <p>Syntax &amp; Example ```javascript // for...of loop</p> <p>/for(element in array/string) {   // Code to be executed } /</p> <p>// Iterating over an array let arrDays = [\"Monday\", \"TuesDay\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];</p> <p>for (let day of arrDays) {   console.log(day);   document.write('<li>' + day + '</li>'); }</p> <p>// Iterating over string let name = 'JavaScript'; for (let letter of name) {   document.write(letter + ',');   console.log(letter + ','); }</p>"},{"location":"03-JavaScript-2/","title":"3: JavaScript (Advanced)","text":"<p>Javascript Session 2</p>"},{"location":"03-JavaScript-2/#section-0306-break-and-continue-statements","title":"Section 03.06 Break and Continue Statements","text":""},{"location":"03-JavaScript-2/#0306-break-and-continue-statement","title":"03.06. Break and Continue statement","text":"<ul> <li><code>break</code> and <code>continue</code> keywords/statement can change <code>how the loop behaves</code></li> <li><code>break</code> and <code>continue</code> keywords can be used in all loops to stop or continue the loop</li> <li>The <code>break</code> statement is used to exit a loop early, to \"jump out\" of a loop, stops executing/running a loop</li> <li>The <code>continue</code> statement tells the interpreter to immediately start the next iteration of the loop and skip the remaining code block</li> </ul> <p>Syntax &amp; Example <pre><code>// break continue statement\n\n/* break */\nlet arrDays = [\"Monday\", \"TuesDay\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet i = 1;\nwhile (i &lt;= 10) {\n  if (i == 5) {\n    break;\n  }\n  console.log(i);\n  i++\n}\n\nconsole.log('// ------------------------------');\n\nfor (let i = 0; i &lt;= arrDays.length; i++) {\n  if (i == 3) {\n    break;\n  }\n  console.log(arrDays[i]);\n}\n\nconsole.log('// ------------------------------');\n\n/* continue */\ni = 1;\nwhile (i &lt;= 20) {\n  if (i % 2 == 0) {\n    // console.log('Even Number ', i);\n    i++;\n    continue; // skip rest of the loop body\n\n    i + 100; // not of use\n    console.log('just in even num continue'); // not of use\n  }\n  console.log('Odd Number ', i);\n  i++;\n}\n\nconsole.log('// ------------------------------');\n\nfor (i = 1; i &lt;= 10; i++) {\n  if (i === 5) {\n    continue; // skip rest of the loop body\n    console.log('just after 5 continue...'); // not of use\n  }\n  console.log(i);\n}\n\nconsole.log('// ------------------------------');\n\nfor(let int = 0; int &lt; 10; int++) {\n\n  if(int === 2) {\n    console.log('2 is favorite EVEN number');\n    continue;\n  }\n\n  if(int === 5) {\n    console.log('at 5 stop the loop');\n    break;\n  }\n\n  console.log('current Number is:', int);\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#0307-for-each-loop","title":"03.07. for each loop","text":""},{"location":"03-JavaScript-2/#0307-foreach-loop","title":"03.07. for...each loop","text":"<p>Syntax &amp; Example: `` <pre><code>let arrDays = [\"Monday\", \"TuesDay\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\narrDays.forEach(function(day)){\n  console.log(day);\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#0405-objects-in-javascript","title":"04.05. Objects in  Javascript","text":"<p>04.05.01 Objects - An object in javascript is a variable that can have multiple attributes and methods. - Attributes of objects are values that represent different features of that  class. - Methods of objects are actions that can be performed by the class using functions.</p> <p>Syntax &amp; Example Let us make an object to represent a person, we will begin with atributes of the person such as their name and age. <pre><code>const person = {\n  firstName: \"Sheldon\",\n  lastName : \"Cooper\",\n  age      : 35\n};\n\n// We can view these atributes with the syntax variable_name.atribute_name\nconsole.log(\"The name of this person is: \" + person.firstName + \" \" + person.lastName);\n</code></pre></p> <p>We can also alter these atributes to update their values <pre><code>console.log(\"Current age: \" + person.age);\n\nperson.age += 1;\n\nconsole.log(\"Current age: \" + person.age);\n</code></pre></p> <p>Javascript also allows us to add and remove atributes of a class <pre><code>// We can add an atribute using the syntax variable_name.atribute_name = value\nperson.iq = 187;\nconsole.log(\"Sheldon's iq: \" + person.iq);\n\n// We can also delete these atributes using the delete keyword\ndelete person.iq;\n\n// This line will now give us an error as the atribute has been deleted\nconsole.log(\"Sheldon's iq: \" + person.iq);\n</code></pre> If we need to check if and object has a paticular atribute we can use the hasOwnProperty method which is inbuilt into all classes</p> <pre><code>console.log(\"Do we have this person's iq?\\n\" + person.hasOwnProperty(\"iq\"));\n</code></pre> <ul> <li>We can now add our own methods to our class using functions <pre><code>const person = {\n  firstName: \"Sheldon\",\n  lastName : \"Cooper\",\n  age      : 35,\n  greetPenny : function() {\n   for (let i = 0; i &lt; 3; i++) {\n        console.log(\"Hey Penny!\");\n    }\n  }\n};\n\nperson.greetPenny(); // This calls the method greetPenny\n</code></pre></li> </ul> <p> </p>"},{"location":"03-JavaScript-2/#section-5-conditions-control-flow","title":"Section 5. Conditions - Control Flow","text":"<ul> <li>Conditional statements are used to perform different action based on different condition</li> <li>Conditional statements allow the developer to make correct decisions and perform right actions as per condition</li> <li>It helps to perform different actions for different decisions</li> <li>We can use conditional operator to check our condition: &gt;, &lt;, &gt;=, &lt;=, ==, !=, ===</li> </ul>"},{"location":"03-JavaScript-2/#we-can-use-the-following-conditional-statements-in-javascript-to-make-decisions","title":"We can use the following conditional statements in JavaScript to make decisions:","text":"<ol> <li>If Statement</li> <li>If...else Statement</li> <li>If...else if...else Statement</li> <li>Switch...Case Statement</li> </ol>"},{"location":"03-JavaScript-2/#0501-the-if-statement","title":"05.01. The if statement","text":""},{"location":"03-JavaScript-2/#the-if-statement-and-comparison-operators","title":"The if statement and comparison operators","text":"<ul> <li>If the conditional statement is the simplest and basic control statement make decisions and execute statements conditionally</li> <li>The if statement is used to execute a block of code <code>only if the specified condition evaluates to true</code></li> <li>It evaluates the content only <code>if an expression is true</code></li> </ul> <p>If conditional statements are used to evaluate some kind of condition and do something/perform some actions based on the result</p> <p>Note:  Use <code>if</code> to specify a block of code to be executed, <code>if a specified condition is true</code></p> <p>Syntax &amp; Example <pre><code>// if conditional statement\n\n/*if(condition/expression) {\n  // Code to be executed if condition/expression is true\n}\n*/\n\nlet user = 'Sheldon';\n\nif (user == 'Sheldon') {\n  console.log('Welcome Sheldon!');\n  window.alert('Welcome Sheldon!');\n}\n\nif (user == 'Sheldon') {\n  console.log('Welcome Authorised User: ' + user + '!');\n  window.alert('Welcome Authorised User: ' + user + '!');\n}\n\n// ------------------------------\n\nlet age = 20;\n\nif (age &gt;= 18) {\n  console.log('MAJOR! Eligible for Voting');\n  window.alert('MAJOR! Eligible for Voting');\n}\n\n// ------------------------------\n\nlet currentHours = 10;\n\nif(currentHours &lt; 12) {\n  console.log('Good Morning!');\n  window.alert('Good Morning!');\n}\n\nif(currentHours &gt;=6 &amp;&amp; currentHours &lt; 12) {\n  console.log('Good Morning!');\n  window.alert('Good Morning!');\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#0502-the-if-else-statement","title":"05.02. The if else statement","text":"<ul> <li>The JavaScript <code>if...else statement</code> is used to execute the code <code>weather condition is true or false</code></li> <li>The developer can enhance the decision-making capabilities by providing an alternative choice through adding an <code>else</code> statement to the <code>if</code> statement</li> <li>The condition can be any expression that evaluates to true or false</li> <li>If the condition evaluates to true, statements_1 are executed; otherwise, statements_2 are executed</li> </ul> <p>Note:  Use <code>else</code> to specify a block of code to be executed, <code>if the same condition is false</code></p> <p>Syntax &amp; Example <pre><code>// if...else conditional statement\n\n/*if(condition/expression){\n// content to be executed if condition is true - statements_1\n}\nelse{\n// content to be executed if condition is false - statements_2\n}*/\n\nlet user = 'Ambar';\n\nif (user == 'Sheldon') {\n  console.log('Welcome Sheldon!');\n  window.alert('Welcome Sheldon!');\n} else {\n  console.log('Welcome Guest!');\n  window.alert('Welcome Guest!');\n}\n\n// ------------------------------\n\nlet age = 15;\n\nif (age &gt;= 18) {\n  console.log('MAJOR! Eligible for Voting');\n  window.alert('MAJOR! Eligible for Voting');\n} else {\n  console.log('MINOR! NOT Eligible for Voting');\n  window.alert('MINOR! NOT Eligible for Voting');\n}\n\n// ------------------------------\n\nlet currentHours = 10;\n\nif(currentHours &lt; 12) {\n  console.log('Good Morning!');\n  window.alert('Good Morning!');\n} else {\n  console.log('Good Evening!');\n  window.alert('Good Evening!');\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#0503-the-if-else-if-else-statement","title":"05.03. The if else if else statement","text":"<ul> <li>The <code>if...else if...else</code> a special statement that is used to <code>combine multiple if...else statements</code></li> <li>It is an advanced form of if...else that allows us to <code>make a correct decision out of several conditions</code></li> </ul> <p>Note:  Use <code>else if</code> to specify a new condition to test, <code>if the first condition is false</code></p> <p>Syntax &amp; Example <pre><code>// If...else if...else conditional statement\n\n/*if(condition/expression 1) {\n    // Code to be executed if condition1 is true statements_1\n} else if(condition/expression 2) {\n    // Code to be executed if the condition1 is false and condition2 is true statements_2\n} else {\n    // Code to be executed if both condition1 and condition2 are false statements_3\n}*/\n\nlet num1 = 200;\nlet num2 = 100;\n\nif (num1 == num2) {\n  console.log('Both numbers are equal');\n} else if (num1 &lt; num2 ) {\n  console.log('Number2 is greater!');\n} else {\n  console.log('Number1 is greater!');\n}\n\n// ------------------------------\n\nlet age = 15;\n\nif (age &gt;= 60) {\n  console.log('SINIOR CIRIZEN!');\n} else if (age &lt; 18) {\n  console.log('MINOR!');\n} else {\n  console.log('MAJOR - Middle Age!');\n}\n\n// ------------------------------\n\nlet currentHours = 15;\n\nif(currentHours &gt;=6 &amp;&amp; currentHours&lt; 12) {\n  console.log('Good Morning!');\n  window.alert('Good Morning!');\n} else if (currentHours &gt;12 &amp;&amp; currentHours &lt;=18) {\n  console.log('Good AfterNoon!');\n  window.alert('Good AfterNoon!');\n} else {\n  console.log('Good Evening!');\n  window.alert('Good Evening!');\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#0504-the-switch-case-statement","title":"05.04. The switch case statement","text":"<ul> <li>The switch...case statement is alternative to an if...else if...else statement, both do almost the same thing</li> <li>This matches the <code>case</code> and the <code>value of condition</code> and if the case matches, the subsequent block is executed and if none of the case matches <code>default block</code> is executed</li> <li>The JavaScript switch statement is used to execute one code from multiple blocks of expressions</li> </ul> <p>Note:  Use <code>switch</code> to specify many <code>alternative blocks of code to be executed</code></p> <p>Syntax &amp; Example <pre><code>// switch...case conditional statement\n\n/* switch(variable/expression){\n  case value1:\n    // Code to be executed if variable/expression === value1\n    break;\n  case value2:\n    // Code to be executed if variable/expression === value2\n    break;\n  default:\n    // Code to be executed if variable/expression is different from all values\n} */\n\nlet grade = 'B'; // A.B,C, or something\n\nswitch (grade) {\n  case 'A':\n    console.log('Great Job! - A Grade');\n    break;\n  case 'B':\n    console.log('Good! - B Grade');\n    break;\n  case 'C':\n    console.log('Congratulations! - Passed');\n    break;\n  default:\n    console.log('Sorry! - Failed...Keep trying!');\n    break;\n}\n\n// ------------------------------\n</code></pre></p> <p> </p> <p><pre><code>let sweets = ''; //cake, chocolates, biscuits\n\nswitch (sweets) {\n  case 'chocolates':\n    console.log('Chubby Chocolates!');\n    break;\n  case 'cake':\n    console.log('Happy BirthDay Cake!');\n    break;\n  case 'biscuits':\n    console.log('Enjoy Biscuits!');\n    break;\n  default:\n    console.log('No Sweets! Try some other sweets!');\n    break;\n}\n</code></pre> <pre><code>const color = 'red';\n\nswitch(color) {\n  case 'red':\n    console.log('The Dark RED');\n    break;\n  case 'green':\n    console.log('Go Green');\n    break;\n  case 'blue':\n    console.log('Boys are Blue');\n    break;\n  case 'yellow':\n    console.log('Golden Yellow');\n    break;\n  default:\n    console.log('Its some other Color, Enter correct color');\n    break;\n}\n</code></pre> <pre><code>let currentDate = new Date();\nlet currentDay;\n\nswitch(currentDate.getDay()) {\n  case 0:\n    currentDay = 'Sunday';\n    break;\n  case 1:\n    currentDay = 'Monday';\n    break;\n  case 2:\n    currentDay = 'Tuesday';\n    break;\n  case 3:\n    currentDay = 'Wednesday';\n    break;\n  case 4:\n    currentDay = 'Thursday';\n    break;\n  case 5:\n    currentDay = 'Friday';\n    break;\n  case 6:\n    currentDay = 'Saturday';\n    break;\n}\n\nconsole.log(`Today is ${currentDay}!`);\n</code></pre></p> <p> </p>"},{"location":"03-JavaScript-2/#0505-lookup-tables","title":"05.05 Lookup Tables","text":"<p>In javascript, we can use objects to create a lookup or mapping between different values. A lookup is a variable that maps an input value to a paticular output value.</p> <p><pre><code>// This is a lookup table that maps names to mobile numbers\nvar mobile_number_lookup = {\"Penny\":58538902, \"Raj\" : 98745689, \"Sheldon\" : 789023456};\n\n// To get the corresponding mobile number from a name we use the syntax variable[input value]\nconsole.log(\"Raj's number is: \", mobile_number_lookup[\"Raj\");\n</code></pre> 05.07 Object Freeze</p> <p>If we want to prevent our object or lookuptable from having any future changes, we make use of the Object.freeze function. <pre><code>const person = {\n  firstName: \"Sheldon\",\n  lastName : \"Cooper\",\n  age      : 35\n};\n// We can chage atributes like normal\nperson.age = 37;\nconsole.log(person.age);\n\n// We now freeze to prevent future changes\nObject.freeze(person);\n\n// This will not take effect since this object is now frozen\nperson.age = 35;\n\nconsole.log(person.age);\n</code></pre></p>"},{"location":"03-JavaScript-2/#06-regular-expressions-regex-in-javascript","title":"06. Regular Expressions (RegEx) in  Javascript","text":"<p>Regular Expressions is a type of format for strings that allows you to easily find and replace characters as you like.</p>"},{"location":"03-JavaScript-2/#0601-search","title":"06.01 Search","text":"<p>The search method allows us to get the index of the substring in the text. Note that this search is regardless of case sensitivity.</p> <pre><code>var text = \"Big Bang Theory\";\n\nconsole.log(text.search(/Theory/i));\n</code></pre>"},{"location":"03-JavaScript-2/#0602-replace","title":"06.02 Replace","text":"<p>The replace method allows us to replace a substring with any string of our choice.</p> <pre><code>var text = \"Big Bang Theory\";\n\nconsole.log(text.replace(/Big/i, \"Massive\"));\n</code></pre>"},{"location":"03-JavaScript-2/#0603-the-test-method","title":"06.03 The Test Method","text":"<p>This checks if the substring contains a string that meets the following criteria. <pre><code>var expression = /Season 1/ // this expression will return true for all strings with the term Season 1\n\nconsole.log(expression.test(\"Season 1 Episode 12\"));\nconsole.log(expression.test(\"Season 2 Episode 12\"));\n</code></pre></p>"},{"location":"03-JavaScript-2/#0604-the-operator","title":"06.04 The | Operator","text":"<p>This operator searches for any of the alternatives provided by the user <pre><code>var expression = /Season 1|Season 2/g // this expression will return true for all strings with Season 1 or Season 2\n\nconsole.log(expression.test(\"Season 1 Episode 12\"));\nconsole.log(expression.test(\"Season 2 Episode 12\"));\nconsole.log(expression.test(\"Season 3 Episode 12\"));\n</code></pre> 06.05 The Match Function</p> <p>This returns all instances where a substring matching the regex expression is found. <pre><code>var text = \"Big Bang Theory\";\n\nconsole.log(text.match(/Big/g));\n</code></pre></p>"},{"location":"03-JavaScript-2/#0606-regex-wildcards","title":"06.06 RegEx Wildcards","text":"<p>Wildcards are placeholders that can represent multiple characters in a string.</p> <ul> <li>\\d represents numbers</li> <li>\\s represents whitespace</li> <li>\\b represents the beginning of a word</li> <li>* represents zero or more whitespaces</li> <li>\\A represents the start of a string</li> <li>[a-z | A-z] can represent any character <pre><code>var expression = /[a-z | A-z]/g // checks if the string contains an alphabet\n\nconsole.log(expression.test(\"a\"));\nconsole.log(expression.test(\"xy\"));\nconsole.log(expression.test(\"1\"));\n</code></pre></li> </ul>"},{"location":"03-JavaScript-2/#section-7-promise","title":"Section 7. promise","text":""},{"location":"03-JavaScript-2/#701-what-is-a-promise","title":"7.01. What is a promise?","text":"<p>Why is a JavaScript ES6 <code>promise</code> called a 'promise'? Here is a snippet from the Oxford Dictionary of English definition of 'promise':</p> <p>promise |\u02c8pr\u0252m\u026as| noun 1 a declaration or assurance that one will do something or that a particular thing will happen</p> <p>This pretty well sums up what a promise means in JavaScript: something that will be delivered in the future (if and when the promise is fulfilled).</p> <p>Traditionally, callbacks are used as a way to receive the data that is delivered asynchronously (meaning that the data is not likely to be available at the time it is requested but can be expected some time later). Using callbacks can quickly become unwieldy when dealing with many asynchronous events (e.g., ajax calls), especially when they depend on each other (google for callback hell).</p> <p>JavaScript ES6 introduces promises as a better alternative for callbacks when dealing with asynchronous events.</p> <p>We can state a number of simple facts about ES6 promises:</p> <ul> <li>A promise is a JavaScript object (<code>typeof somePromise === 'object'</code>) that serves as a placeholder for a (future) value.</li> <li>Because a promise is an ordinary JavaScript object you can pass it around as an argument to a function, return it from a function, assign it to a variable, push it to an array, etc.</li> <li>You can receive the 'promised' value by calling the <code>.then()</code> method of the promise, passing it a function that will receive that value as its argument as soon as it is available.</li> <li>You can create a promise by calling the ES6 <code>Promise</code> constructor function with <code>new</code> (see Listing 1 below), then call <code>resolve()</code> when results are ready or <code>reject()</code> on detecting an error.</li> <li>Sometimes you can get a ready-made promise by calling an appropriate API or library function, like the <code>fetch()</code> Web API function in Listing 1.</li> <li>Internally, a promise can be in one of three states:</li> <li>pending: the asynchronous result is still awaiting delivery</li> <li>fulfilled: the asynchronous result has been delivered and is available (<code>resolve()</code> was called)</li> <li>rejected: an error was encountered: the promise could not be fulfilled (<code>reject()</code> was called)</li> <li>A promise that is no longer pending because it was either fulfilled or rejected is said to be settled.</li> <li>A promise that is settled has reached its final state. Its state and value can no longer be changed. It has become immutable. Subsequently calling <code>resolve()</code> or <code>reject()</code> does no longer affect the outcome of the promise.</li> </ul>"},{"location":"03-JavaScript-2/#example-code","title":"Example code","text":"<p>Listing 1 shows an example based on an asynchronous XMLHttpRequest that we will use throughout the rest of this discussion.</p> <pre><code>'use strict';\n\nfunction fetchJSON(url) {\n  return new Promise((resolve, reject) =&gt; {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'json';\n    xhr.onreadystatechange = () =&gt; {\n      if (xhr.readyState === 4) {\n        if (xhr.status &lt; 400) {\n          resolve(xhr.response);\n        } else {\n          reject(new Error(xhr.statusText));\n        }\n      }\n    };\n    xhr.send();\n  });\n}\n\n// alternative:\n// const fetchJSON = url =&gt; fetch(url).then(res =&gt; res.json());\n\nconst url = 'http://api.nobelprize.org/v1/laureate.json?gender=female';\n\nfetchJSON(url)\n  .then(data =&gt; renderData(data))\n  .catch(err =&gt; renderError(err));\n\nfunction renderData(data) {\n  console.log(data);\n}\n\nfunction renderError(err) {\n  console.error(err.message);\n}\n</code></pre> <p>Listing 1. Asynchronous <code>XMLHttpRequest</code> (and <code>fetch</code> alternative) using a promise.</p> <p>The <code>fetchJSON()</code> function in Listing 1 returns a <code>promise</code> that resolves to a value converted from JSON data received from a remote API end point. The alternative version of <code>fetchJSON()</code> (commented out here) uses a more modern browser function that natively returns a promise.</p>"},{"location":"03-JavaScript-2/#702-the-then-method","title":"7.02. The .then() method","text":"<p>A promise exposes a <code>.then()</code> method through which you can obtain its fulfilled value or an error value in the case the promise was rejected:</p> <pre><code>somePromise.then(onFulfilled, onRejected);\n</code></pre> <p>The <code>.then()</code> method takes as its parameters two optional functions, the first one dealing with the 'happy' scenario (the promise is fulfilled) and the second one dealing with the error case (the promise is rejected). If you are only interested in the success case you can leave out the second parameter:</p> <pre><code>somePromise.then(data =&gt; {\n  // ...\n});\n</code></pre> <p>If you are only interested in the error case, you can pass <code>null</code> for the first argument:</p> <pre><code>somePromise.then(null, err =&gt; {\n  //...\n});\n</code></pre> <p>or you can use another method available on a promise, <code>.catch()</code>, which is just a shorthand for calling <code>then()</code> with <code>null</code> as its first argument:</p> <pre><code>somePromise\n  .then(data =&gt; {\n    // ...\n  })\n  .catch(err =&gt; {\n    // ...\n  });\n</code></pre> <p>Note that the <code>onFulfilled</code> and <code>onRejected</code> handler functions always execute asynchronously. When the promise is settled, the <code>onFulFilled</code> or <code>onRejected</code> handler is placed on the event/callback queue. They execute when the currently executing JavaScript code runs to completion, causing the call stack to become empty and enabling the event loop to process the next event from the queue. This holds true even if the promise is immediately fulfilled or rejected, as in this example:</p> <pre><code>Promise.resolve(42)\n  .then(data =&gt; console.log(data));\n\nconsole.log('after promise');\n\n// console output:\n// after promise\n// 42\n</code></pre> <p>This example also shows how you can create a promise that is immediately resolved. There is no need to use <code>new</code> or to pass a <code>(resolve, reject) =&gt; {}</code> function to the <code>Promise</code> constructor. Similarly you can create a promise that is immediately rejected:</p> <pre><code>Promise.reject(new Error('oops'))\n  .catch(err =&gt; console.log(err.message));\n\nconsole.log('after promise');\n\n// console output:\n// after promise\n// oops\n</code></pre>"},{"location":"03-JavaScript-2/#703-promise-chaining","title":"7.03 Promise chaining","text":"<p>It is important to understand that the <code>.then()</code> method returns a new promise that resolves to the return value of <code>onFulfilled</code> (if specified) in case of the 'happy' scenario or the return value of <code>onRejected()</code> (if specified) in case of an error. If the return value of these functions is a plain JavaScript value, the new promise is immediately fulfilled with that value. If the return value is yet another promise then the outcome is determined by the inner promise, once settled. If the function does not return a value, the new promise is immediately fulfilled with the value <code>undefined</code>.</p> <p>Because <code>.then()</code> (and <code>.catch</code>) return new promises, you can chain them together such that your code can be read as: do this, then do that and then that, etc.:</p> <pre><code>function fetchAndRender(url, otherUrl) {\n  fetchJSON(url)\n    .then(data =&gt; {\n      renderData(data);\n      return fetchJSON(otherUrl);\n    })\n    .then(otherData =&gt; {\n      renderOtherData(otherData);\n    })\n    .catch(err =&gt; {\n      renderError(err);\n    });\n}\n\nfetchAndRender();\n</code></pre> <p>Listing 2. Chaining of <code>then</code> and <code>catch</code></p> <p>Let's examine Listing 2 in a bit more detail. There two calls to <code>fetchJSON()</code>. Errors are handled in one place, by means of the <code>.catch()</code> method that terminates the promise \"chain\".</p> <p>If you embed another promise inside the function that you pass to the <code>.then()</code> method (in Listing 2 this is done in the first <code>.then()</code>) you should return that promise as the function's return value. If you don't return the promise, there is no way for the <code>.catch()</code> at the end of the chain to \"see\" a <code>reject()</code> of the inner promise, leaving the rejection unhandled.</p> <p>In case a promise in the chain is rejected due to some error, the promise chain will be traversed until an <code>onRejected</code> handler (e.g., in a terminating <code>.catch()</code> method) is found. All intermediate <code>onFulfilled</code> handlers (e.g. <code>.then()</code>) will be skipped.</p> <p>Handling errors at the end of a promise chain is a major advantage over the repetition of error handling code in the case of callbacks.</p> <p>Note however that a <code>.catch()</code> method does not necessarily have to be the last method in the chain. It can be used to handle errors midway. As mentioned previously, the <code>.catch()</code> method returns a new promise which can be used to provide some \"fallback\" value in case of errors.</p> <p>In the example below a promise is created that is immediately rejected. The promise is subsequently \"consumed\" twice.</p> <ol> <li> <p>In the first case ('consumer 1'), the rejection is caught by a <code>.catch()</code> method and the rejection value <code>'bad'</code> is printed on the console.</p> </li> <li> <p>In the second case ('consumer 2'), the rejection is also caught by a <code>.catch()</code> method, but now the catch handler completely ignores the rejection value and just returns the fallback value <code>'good.</code>. This becomes the fulfilled value of the promise returned by <code>.catch()</code>. The next <code>.then()</code> in the chain, completely oblivious that an error ever occurred, now prints the fulfilled value <code>'good'</code> on the console.</p> </li> </ol> <pre><code>const promise = Promise.reject('bad');\n\n// consumer 1\npromise\n  .catch(console.log); // -&gt; \"bad\"\n\n// consumer 2\npromise\n  .catch(() =&gt; 'good')\n  .then(console.log); // -&gt; \"good\"\n</code></pre>"},{"location":"03-JavaScript-2/#704-promiseall","title":"7.04 Promise.all()","text":"<p>There may be situations where you want to execute multiple promises in parallel and wait until all promises are resolved. Of course, these promises must not be interdependent (i.e. a promise must not depend on the result of another promise running in parallel). The <code>Promise.all()</code> method accepts an array (or more precisely, an iterable) of promises. It return a new promise that is resolved when all promises in the array are resolved, or rejected as soon as one of the promises in the array is rejected.</p> <p>The fulfilled value of the new promise is an array of fulfilled values of the individual promises passed to <code>Promise.all()</code>, in the same order.</p>"},{"location":"03-JavaScript-2/#section-8-dom-document-object-manager","title":"Section 8. DOM (Document Object Manager)","text":"<p>DOM is a system which allows javascript to interact with the html of a webpage. The elements are stored in a type of tree structure that represents the HTML format. Below we can see a visualization of what this looks like.</p> <p> </p> <p>As we can see, the tree begins with an element called document. This is actually an inbuilt object that javascript gives us. It serves as a starting point from which we can access it's many methods and attributes that allow us to interact with the webpage.</p>"},{"location":"03-JavaScript-2/#801-finding-elements-using-dom","title":"8.01 Finding Elements using DOM","text":"<p>To find an element using DOM, we need an identifier to understand which element we are looking for. Below are examples of HTML and javascript code using different identifiers. First see what the raw html looks like in codepen and then add the javascript later to see the difference.</p>"},{"location":"03-JavaScript-2/#80101-id-of-an-html-tag","title":"8.01.01 Id of an HTML tag","text":"<p>Html code <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p id=\"demo\"&gt; Who is smart?&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JS code <pre><code>document.getElementById(\"demo\").innerHTML = \"Sheldon is smart!\";\n</code></pre></p>"},{"location":"03-JavaScript-2/#80102-name-of-an-html-tag","title":"8.01.02 Name of an HTML tag","text":"<p>Html code <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p id=\"demo\"&gt; Who is smart?&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JS code <pre><code>const element = document.getElementsByTagName(\"p\");\n\ndocument.getElementById(\"demo\").innerHTML = 'The question is: ' + element[0].innerHTML;\n</code></pre></p>"},{"location":"03-JavaScript-2/#80103-name-of-a-class-name","title":"8.01.03 Name of a Class Name","text":"<p>Html code <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p class=\"intro\"&gt; Who is smart?&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JS code <pre><code>const element = document.getElementsByClassName(\"intro\");\n\ndocument.getElementById(\"demo\").innerHTML = 'The question is: ' + element[0].innerHTML;\n</code></pre></p>"},{"location":"03-JavaScript-2/#802-writing-information-from-javascript-to-html","title":"8.02 Writing information from javascript to html","text":"<p>In some cases we might want javascript to simply paste information onto the page. For this we can use the document.write() function. <pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;p&gt;The date and time is&lt;/p&gt;\n\n&lt;script&gt;\ndocument.write(Date()); // Date() returns the current date and time\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"03-JavaScript-2/#803-altering-css-using-javascript","title":"8.03 Altering CSS using javascript","text":"<p>We use the .style attribute of the document object to edit the css code. Here we take the following steps to change the color of the text</p> <ol> <li>Get the HTML tag using document.getElementById</li> <li>Get the CSS of this tag from the style attribute.</li> <li>In the CSS attribute get the color attribute.</li> <li>Set this value to \"green\".</li> </ol> <p>HTML code <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p id=\"p2\"&gt;This text can change color.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> JS code <pre><code>document.getElementById(\"p2\").style.color = \"green\";\n</code></pre></p>"},{"location":"03-JavaScript-2/#804-using-dom-to-dynamically-alter-html","title":"8.04 Using DOM to dynamically alter html","text":"<p>Changing simple text using DOM is well and good, but how can we use the more powerful aspects of JS such as loops to edit HTML in a dynamic way? To demonstrate this type of behavior we will show you some simple code to use a loop that constantly moves a paragraph across the screen.</p> <p>HTML code <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p id=\"p3\" style = \"position: absolute;top : 100px;\"&gt;This text is moving across the screen.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>JS code The setTimeout function is a simple function that waits a set amount of milliseconds before executing some code. If we run this with i * 10 timeout the it will wait in intervals of 0, 10, 20 and so on before executing the code. This will allow us to see the text move across the screen instead of the loop running faster than we can comprehend it. <pre><code>for (let i = 0; i &lt; 1000; i += 0.5) {\n  setTimeout(function () {\n        document.getElementById(\"p3\").style.left = i + \"px\";\n    }, i * 100);\n}\n</code></pre></p>"},{"location":"03-JavaScript-2/#section-9-project","title":"Section 9. Project","text":"<p>Click here for a simple project made by the concepts we learnt till now. Try making more!!</p>"},{"location":"04-API/","title":"API Fundamentals","text":"<p>This collection is a companion to the Postman Classroom Program workshop API 101: API Fundamentals</p>"},{"location":"04-API/#what-you-will-learn","title":"What you will learn","text":"<ul> <li>What are APIs?</li> <li>Servers &amp; Clients</li> <li>Making HTTP requests to an API</li> <li>Understanding API responses</li> <li>Submitting data to APIs</li> <li>Using query parameters to refine requests</li> </ul>"},{"location":"04-API/#resources","title":"Resources","text":"<ul> <li>Sending Requests in Postman</li> <li>Receiving Responses</li> <li>Troubleshooting Requests</li> </ul>"},{"location":"04-API/#whats-this-api-thingy","title":"What's this API Thingy?","text":"<p>Application Programming Interfaces (APIs) allow services to communicate with each other.</p>"},{"location":"04-API/#an-analogy","title":"An Analogy","text":"<p>We can think of an API as a waiter at a restaurant. </p> <p></p> <p>Imagine you go to your favorite restaurant and you want to order.</p> <p>You, in this case, are the client. You are sending your requests through the waiter, who tells the kitchen what to make.</p> <p>The waiter will come back with your food, or they may come back to tell you that the kitchen is out of what you ordered.</p> <p>Regardless, the waiter serves as a mediator between you and the kitchen, and that\u2019s what APIs do for clients and services. </p> <p>Similiarly, in the Software World, we may need to get data from a service, like Google or Facebook. Since we don\u2019t have access to those companies codebases, they create APIs so developers can get information from their services without access to the codebase.</p> <p>Both developers and non-developers use APIs to get data from popular services like Twitter and Google to use in their own projects. </p> <p>Software today has become more complex and collaborative over the years. Developers no longer need to create every service from scratch. Today you can find a suitable for nearly any kind of operation you might need.</p> <p>some notable examples include:</p> <ul> <li>OpenWeatherMap: Allows you to get weather information of the place you input</li> <li>Discord: Create channels, manage bots and more</li> <li>Youtube-to-MP3</li> <li>Spotify: Get your playlist, get information about artists, albums, songs, see what's playing on your device Right Now.</li> <li>Twitter: Mange posts</li> <li>Facebook</li> <li>Google</li> <li>And so many more!</li> </ul>"},{"location":"04-API/#clients-and-servers","title":"Clients and Servers","text":"<ul> <li> <p>A client is the entity that makes a request to a server. Somes examples of clients are applications like web browsers. </p> </li> <li> <p>A server controls resources and services. An API is the interface that exposes these resources + services to clients in a network. </p> </li> </ul> <p>The client can interact with an API by making requests over the network to the API. The API will then evaluate the request, perform the required operations, maybe interact with a database or other APIs, then send back a response to the client. </p> <p>Postman is a client that allows you to make requests and view responses from servers.</p>"},{"location":"04-API/#requests","title":"Requests","text":"<ul> <li>Requests are how we communicate with the API. You need three things to make an API request:</li> <li>Method (GET, POST, etc)</li> <li>Address/Endpoint (URL)</li> <li>Path</li> </ul> <p>These elements let the API know what kind of request you\u2019re making and where to send the request.</p> <p>Below is a table of the methods that are most commonly used:</p> Method Action GET Retrieve information POST Send information PUT/PATCH Update information DELETE Delete information <p>Below is an image showing more about Address and paths</p> <p></p>"},{"location":"04-API/#request-body","title":"Request Body","text":"<p>When send <code>POST</code> and <code>PUT</code> requests, the server will often expect data that it will process to complete your request, depending upon the API, it may ask for data in various types such as</p> <ul> <li>form data</li> <li>JSON</li> <li>text</li> <li>HTML</li> <li>XML</li> <li>files</li> <li>GraphQL</li> <li>\u2026 and more!</li> </ul> <p>All of this can be specified under the \"Body\" tab in Postman (under the request)</p>"},{"location":"04-API/#responses","title":"Responses","text":"<p>When you make an API call, you will get a response value from the server. There are varoius types of responses but here are the most commone ones:</p> <ul> <li><code>200 OK</code> is usually the best response that the API works as 200 OK means Successful.</li> <li><code>201 Created</code></li> <li><code>400 Bad Request</code></li> <li><code>401 Unauthorized</code></li> <li><code>403 Forbidden</code></li> <li><code>404 Not found</code></li> </ul>"},{"location":"04-API/#hands-on","title":"Hands On","text":"<p>Brooklyn 99 API Reference</p> <p></p> <p>Base URL: <code>b99.acm.org/api</code></p>"},{"location":"04-API/#get-characters","title":"GET Characters","text":"<p>URL: <code>https://b99.acm.org/api/characters</code></p> <p>Returns all characters in the database.</p> <p>Optional filters can be passed as query parameters (see below)</p> Query Params example search a search string to be matched against author/title (example: borges). Case insensitive, partial match OK. Jake Peralta designation filter by genre (case-insensitive, exact match) Detective workplace filter by genre (case-insensitive, exact match) Brooklyn 99 married true/false false seasonFirstAppearedIn integer 1...9 <p>example: <code>characters?filters[married][$eq]=true</code> <code>characters?filters[name][$contains]=amy</code></p> <p></p>"},{"location":"04-API/#get-character-by-id","title":"GET character by id","text":"<p>URL: <code>https://b99.acm.org/api/characters/:id</code></p> <p>Get a single character by id</p> <p>Replace the last part of path with the id of the character you would like to fetch.</p> <p><code>/characters/:id</code></p> Path Variables id ZUST9JFx-Sd9X0k"},{"location":"04-API/#post-add-character","title":"POST - add character","text":"<p>URL: <code>https://b99.acm.org/api/characters</code></p> <p>Adds a character</p> <p><pre><code>{\n  \"name\": \"Jake Peralata\",\n  \"maritalStatus\": \"married\",\n  \"designation\": \"detective\",\n  \"workplace\": \"brooklyn 99\",\n  \"halloweenHeist\": 1,\n  \"seasonFirstAppearedIn\": 1\n}\n</code></pre> </p>"},{"location":"04-API/#patch-updates-a-character","title":"PATCH - updates a character","text":"<p>URL: <code>https://b99.acm.org/api/characters/:id</code></p> <p>Updates a character by id</p> <p>Update any of these fields for a characters with given id via the JSON body: - <code>name</code> (string) - <code>maritalStatus</code> (string) - <code>designation</code> (string) - <code>workplace</code> (string) - <code>halloweenHeist</code> (integer)</p> Path Variable Value id ZUST9JFx-Sd9X0k <p>Body <pre><code>{\n  \"designation\": \"south california\"\n}\n</code></pre> </p>"},{"location":"04-API/#del-delete-a-character","title":"DEL - delete a character","text":"<p>URL: <code>https://b99.acm.org/characters/:id</code></p> Path Variable Value id ZUST9JFx-Sd9X0k"},{"location":"04-API/#mission","title":"Mission","text":"<p>Need to put some random mission here please You are at a training learning how to use the Brooklyn 99 API.</p>"},{"location":"04-API/#before-you-start","title":"Before you start","text":"<ul> <li>Check out the request documentation in the Brooklyn 99 API Reference folder to get familiar with the API and the types of requests you can make.</li> </ul> <p>There are multiple ways to view documentation:</p> <p>Click the three dots next a folder in the file explorer, then \"View Documentation\". This will show all the documentation for the whole collection.   Navigate to a request and click the small file icon in the far-right menu</p> <ul> <li>Need help?</li> </ul> <p>If you get stuck, search the Postman forums or post a new topic in the Training category if you don't see your question. Also, see these general troubleshooting tips.</p> <ul> <li>Check the Postman Console in the lower left</li> </ul> <p>The Postman Console is a useful tool for debugging requests when you get errors, or you want to view logged data from your test scripts.</p> <ul> <li> <p>Hint: You will need to figure out a way to find the id of the joke you've just added. Take a look at the Brooklyn 99 API Reference - how can you find the new joke's id?</p> </li> <li> <p>Instead of hard-coding the id in the request URL, set the id as a collection variable called newJokeId. This way you can reuse the same id in other requests like this: {{JokeId}}</p> </li> <li> <p>To use your variable newJokeId as a path parameter in the request URL, include :newJokeId (with a colon in front) in your request URL. Then in the Params tab of the request you can specify the Value of the path parameter as your variable {{newJokeId}} (with double curly braces)</p> </li> <li> <p>Be sure to save your variables!</p> </li> <li> <p>Remember to use your collection variable {{newJokeId}} as the value for the path parameter :newJokeId in your request URL!</p> </li> <li> <p>Be sure to save your request!</p> </li> </ul> <p>There are multiple people at here using the same API - don't be surprised if you see new Jokes appearing!</p> <p></p>"},{"location":"04-API/#get-view-inventory","title":"GET - view inventory","text":"<p>URL: <code>https://b99.acm.org/api/jokes</code></p>"},{"location":"04-API/#post-add-a-joke-to-the-store","title":"POST - add a joke to the store","text":"<p>URL: <code>https://b99.acm.org/api/jokes</code></p> <p>Body: <pre><code>{\n  \"Joke\": \"The Pragmatic Programmer: From Journeyman to Master\",\n  \"author\": \"Andy Hunt, Dave Thomas\",\n  \"season\": 1\n}\n</code></pre></p>"},{"location":"04-API/#get-search-jokes","title":"GET - search jokes","text":"<p>URL: <code>https://b99.acm.org/api/jokes?search=noice</code></p> Query Param search pragmatic"},{"location":"04-API/#patch-change-authorseason","title":"PATCH - change author/season","text":"<p>URL: <code>https://b99.acm.org/api/characters/:id</code></p> Path Variable Value id ZUST9JFx-Sd9X0k <p>Body</p> <pre><code>{\n  \"author\": \"me\"\n}\n</code></pre>"},{"location":"04-API/#get-get-details-for-a-single-joke","title":"GET - get details for a single joke","text":"<p>URL: <code>https://b99.acm.org/api/jokes/:id</code></p> Path Variable Value id ZUST9JFx-Sd9X0k"},{"location":"04-API/#del-delete-the-joke","title":"DEL - delete the joke :(","text":"<p>URL: <code>https://b99.acm.org/api/jokes/:id</code></p> Path Variable Value id ZUST9JFx-Sd9X0k"},{"location":"04-API/#learning-to-read-api-documentation-is-a-crucial-skill-when-working-with-apis-it-is-also-important-to-get-familiar-with-reading-errors","title":"Learning to read API documentation is a crucial skill when working with APIs. It is also important to get familiar with reading errors.","text":""},{"location":"04-API/#play-around-with-some-requests-and-see-if-you-can-get-the-api-to-generate-any-errors","title":"Play around with some requests and see if you can get the API to generate any errors","text":"<p>What happens when you:</p> <ul> <li>pass unrecognized parameters?</li> <li>hit an unrecognized endpoint?</li> <li>try to make a PUT request on a field you don't have permission to edit?</li> <li>try to add a joke with made-up fields in the body?</li> <li>try to delete the joke named \"Ficciones\" by Jorge Luis Borges?</li> <li>If you are interested in seeing the code behind this API, you can view it here.</li> </ul> <p></p>"},{"location":"05-CLI-Git/","title":"Command Line Interfaces (and Git)","text":"<p>A command-line interface (CLI) is a text-based interface used to run programs, manage computer files and interact with your computer. Most operating systems (OSes) also offer a graphical user interface (GUI) which is usually easier to learn.</p>"},{"location":"05-CLI-Git/#so-why-cli","title":"So Why CLI?","text":"<p>Fluency on the command line is a skill which improves your productivity and flexibility as a computer engineer:</p> <ul> <li> <p>Functionality     A GUI does not have the same level of functionality and control as a CLI. CLI's can be used to easily do things that are difficult or even impossible to do with a GUI.</p> </li> <li> <p>Automation     With a CLI, users have all the control over the file system and operating system, and the tasks become simple. You can create a script that contains a few lines of command and it will do the work for you.</p> </li> <li> <p>Programming     The CLI is extremely helpful for programmers for: Installing modules, debugging code, setting up softwares like Git, NPM, Pip, MySQL etc.</p> </li> <li> <p>Speed &amp; Memory     CLI's are faster and use lesser memory. They can even be used to salvage an older laptop that's too slow to run a GUI.</p> </li> </ul> <p>Another great thing about CLI's is that you look really cool working with it... In fact you might even feel - Legendary.</p>"},{"location":"05-CLI-Git/#getting-connected","title":"Getting Connected","text":""},{"location":"05-CLI-Git/#windows","title":"Windows","text":"<p>We are going to be using a pretty nifty tool called <code>Git Bash</code>. <code>Git Bash</code> is an application for Microsoft Windows environments which provides an emulation layer for a command line experience. </p> <p>What Does that mean? It means you can experience a Linux-like terminal within your windows PC. Git Bash comes included with Git itself, so just download Git from git-scm.com</p> <p>If you don't know if you're a 32 or 64 bit system check settings &gt; system &gt; about (might vary depending on Windows version)</p> <p>STEPS: * Once the <code>.exe</code> file is saved in your PC, run it. * Click on Yes when promted to allow this application to make changes to your PC * Read the Terms &amp; Conditions (yeah right). Click on Next. * For the next few screen feel free to just keep clicking Next if you don't know what anything means. * Once Installation is done, you will see a screen like this</p> <ul> <li>Check the <code>Launch Git Bash</code> Option. There you go, setup completed. You should now have a terminal screen launched.</li> </ul>"},{"location":"05-CLI-Git/#mac","title":"Mac","text":"<p>The Mac shell is Unix based just like Linux, so no extra installation will be required initially. Simply launch the CLI by pressing <code>cmd+space</code>, type in <code>terminal</code> and hit enter.</p>"},{"location":"05-CLI-Git/#linux-distros","title":"Linux Distros","text":"<p>Linux? Great, simply launch a new terminal by either pressing <code>Ctrl+Alt+T</code> or right click the desktop and Open Terminal.</p>"},{"location":"05-CLI-Git/#lets-begin","title":"Let's Begin","text":""},{"location":"05-CLI-Git/#simple-stuff","title":"Simple Stuff","text":""},{"location":"05-CLI-Git/#printf","title":"<code>printf</code>","text":"<p>The <code>printf</code> command is used to print output on screen. It can also be used to print in a specific format. This is similar to the printf command from the C language.</p> <pre><code>printf \"Hello, %s\\n\" \"World\"\n</code></pre>"},{"location":"05-CLI-Git/#windows-git-bash-users","title":"Windows Git Bash Users","text":"<p>You might find pasting stuff to Git Bash isn't as simple as <code>Ctrl+V</code>. If you right click on the terminal you will see that paste is <code>Shift+Insert</code>. You can go into Options&gt;Keys&gt;Ctrl+Shift+Letter Shortcuts to enable <code>Ctrl+Shift+V</code> for pasting.</p>"},{"location":"05-CLI-Git/#echo","title":"<code>echo</code>","text":"<p>Echo is another command which can be used for displaying/printing whatever follows to the standard output (screen).</p> <pre><code>echo \"Hello, world.\"\n</code></pre>"},{"location":"05-CLI-Git/#comments","title":"Comments","text":"<p><pre><code>Anything to the right of the # is ignored by the command line interface.\n</code></pre> They are there just for you. So you know what you're doing.</p>"},{"location":"05-CLI-Git/#navigation","title":"Navigation","text":"<p>When working with a GUI, we navigate across the filesystem using a file explorer:</p> <ul> <li>File Explorer (Windows)</li> <li>Finder (macOS)</li> <li>Dolphin, Nautilus, Thunar and many others! (Linux)</li> </ul> <p>Akin to those, CLI's use paths to refer to files and to let you know where you are. The path of a file or a directory describes their location on a computer.</p>"},{"location":"05-CLI-Git/#path","title":"Path","text":"<p>The path of a file or a directory describes their location on a computer.</p> <p>There are two types of paths:</p> <ul> <li> <p>Relative Path: It refers to the location of a file or directory, relative to the current directory (or present working directory/pwd). The paths can look something like <code>stolen/bluehorn.txt</code> (no '<code>/</code>' in the start)</p> </li> <li> <p>Absolute Path: It is the location of a file or a directory, relative to the root directory. These will look something like <code>/c/Users/TedMosby</code>. The main difference in how the system recognises Relative and Absolute paths are the leading '<code>/</code>' in absolute paths.</p> </li> </ul> <p>Some important shorthand notations: - <code>.</code> refers to the current directory - <code>..</code> refers to the parent of the current directory - <code>~</code> refers to the <code>HOME</code> directory - <code>/</code> refers to the root directory</p>"},{"location":"05-CLI-Git/#case-sensitivty","title":"Case Sensitivty","text":"<p>Since <code>Git Bash</code> resides in a Windows Machine, it is not case sensitive, so you can refer to your location as /c/Users/Ted or /c/users/ted and both will work. This is not the case in a traditional linux distro where directories and files are case sensitive.</p>"},{"location":"05-CLI-Git/#pwd","title":"<code>pwd</code>","text":"<p>Use the <code>pwd</code> command to find the present working directory.</p> <pre><code>pwd # this will tell you exactly where you are (absolute path)\n</code></pre>"},{"location":"05-CLI-Git/#ls","title":"<code>ls</code>","text":"<p>The <code>ls</code> command is used to list all the files and directories. You may even type <code>ls {path} # relative or absolute</code> to list files from a specific path, by default it lists files from your present working directory.</p> <pre><code>ls # Simply prints all files and directories, which may even be colour coded depending on the client you are using\n\nls Desktop/ # Prints all files and directories within /pwd/Desktop (relative path)\n\nls /c/Users/{your_username}/Desktop # Prints all files and directories within /c/Users/{your_username}/Desktop, same as previous command but using an absolute path\n</code></pre> <p>This command is used to list out all files and directories along with hidden files and links to parent directories. Hidden directories/files are represented by a '.' before the filename, such as .bashrc</p> <pre><code>ls -a # The -a is known as a command line option, a single command can have multiple options\n</code></pre>"},{"location":"05-CLI-Git/#command-line-options-in-bash","title":"Command Line Options in Bash","text":"<p>Almost all command such as <code>pwd</code>, <code>ls</code> come with Command line options. These options are recognised by a minus sign for example <code>ls -a</code>. </p> <p>You can see all command line options for a certain command by using the command <code>man</code></p>"},{"location":"05-CLI-Git/#man","title":"<code>man</code>","text":"<p>The <code>man</code> command displays the user manual entry for the command mentioned.</p> <p>Unfortunately the <code>man</code> command is not supported with <code>Git Bash</code>, alternatively most commands come with a command line option --help, or you can refer the Resources for a help sheet.</p> <pre><code>man ls # this will bring up a screen with the manual entry, use your \u2193 arrow key to scroll, and press q to go back to your CLI\nls --help # for Git Bash users\n</code></pre>"},{"location":"05-CLI-Git/#clear","title":"<code>clear</code>","text":"<p>Terminal is getting messy? <code>clear</code> the output simply by using:</p> <pre><code>clear\n</code></pre> <p>You may also use <code>Ctrl+L</code> for similar functionality.</p>"},{"location":"05-CLI-Git/#cd","title":"<code>cd</code>","text":"<p>The <code>cd</code> is used for traversal between directories.</p> <p>Once you have used the <code>ls</code> command and you see the existing directories, you can cd/change directory into them using this command</p> <pre><code>cd Directory_name\n</code></pre> <p>If the directory we wish to explore is nested we use <pre><code>cd Documents/CodingBootcamp\n</code></pre> It can only be used to enter directories not files.</p> <p>The <code>cd</code> command is also use to traverse up directories, we do this by typing, as mentioned in the path section above. <pre><code>cd ..\n</code></pre> which moves up a directory.</p> <p>To return to the home directory you can simply <pre><code>cd\n</code></pre></p> <p>remember you can always check where you are by typing <code>pwd</code>.</p>"},{"location":"05-CLI-Git/#quick-tricks","title":"Quick Tricks","text":"<p>One great way to make your CLI workflow faster is by using some keyboard shortcuts. Use the \u2191, \u2193 arrows on your keyboard to recall the commands you have typed in previously</p> <p>Tab button, once you type <code>cd</code> and begin typing in a directory name, <code>cd maind</code> you can press tab to autofill the rest of the name, of course this would only work if the first few letters of the directory existed. </p>"},{"location":"05-CLI-Git/#lets-get-creating","title":"Let's get Creating","text":""},{"location":"05-CLI-Git/#mkdir","title":"<code>mkdir</code>","text":"<p>The <code>mkdir</code> command is used to create a directory. So let's make one, ensure you are at your home directory, use <code>cd</code> to get there.</p> <pre><code>mkdir TedMosby # Makes a directory called TedMosby\n</code></pre> <p>To see that it has been created use <code>ls</code>, then <code>cd</code> into your newly created directory with </p> <pre><code>cd TedMosby\n</code></pre>"},{"location":"05-CLI-Git/#touch","title":"<code>touch</code>","text":"<p>Use the <code>touch</code> command to create a file, if the file already exists, touch will just update timestamps.</p> <pre><code>touch teds_friends.txt # creates an empty file named 'teds_friends.txt'\n</code></pre> <p>Most systems have in-built text editors. Vim (the sequel to Vi) and Emacs are the best to use. However, due to their steep learning curves, they are not advisable for beginners.</p>"},{"location":"05-CLI-Git/#stat","title":"<code>stat</code>","text":"<p>The <code>stat</code> command is similar to properties of a file in windows. <pre><code>stat teds_friends.txt\n</code></pre></p>"},{"location":"05-CLI-Git/#nano","title":"<code>nano</code>","text":"<p>Let's start editing files, for that we will use a simple command line text editor known as <code>nano</code>.</p> <pre><code>nano teds_friends.txt # opens 'teds_friends.txt' with nano\n</code></pre> <p>Let's keep track of Ted's best friends with this file.</p> <pre><code>Marshall Eriksen\nRobin Scherbatsky\nBarney Stinson\nLily Aldrin\n</code></pre> <p>To save the contents of the file:</p> <ul> <li>Hit <code>Ctrl</code> + <code>S</code> to save the contents of the file.</li> <li>Hit <code>Ctrl</code> + <code>X</code> to exit <code>nano</code>.</li> </ul>"},{"location":"05-CLI-Git/#reading-files","title":"Reading Files","text":""},{"location":"05-CLI-Git/#cat","title":"<code>cat</code>","text":"<p>Use the <code>cat</code> command to display the contents of the file</p> <pre><code>cat teds_friends.txt # This will print the text you entered in the previous step \n</code></pre>"},{"location":"05-CLI-Git/#head","title":"<code>head</code>","text":"<p>Use the <code>head</code> command to display the first few lines of the file</p> <pre><code>head teds_friends.txt -n 2 # prints the first 2 lines, change the number to print a different number of lines, if you dont specify -n option it will print 10 lines by default\n</code></pre>"},{"location":"05-CLI-Git/#tail","title":"<code>tail</code>","text":"<p>Similarly, you can display the last few lines with <code>tail</code></p> <pre><code>tail teds_friends.txt -n 2\n</code></pre>"},{"location":"05-CLI-Git/#less","title":"<code>less</code>","text":"<p>When it comes to larger files, it becomes inconvenient to just print the entire file to your terminal, so the <code>less</code> command comes in handy, it generates a page layout.</p> <pre><code>less teds_friends.txt # You can use arrow keys to scroll, and type q to quit\n</code></pre>"},{"location":"05-CLI-Git/#task-time","title":"Task Time","text":"<p>Create files with the following content using <code>nano</code>:</p> <p>Now getting back to making these files, and recording Ted's friends birthdays!</p> <ul> <li> <p><code>Marshall Eriksen.txt</code> <pre><code>1978\n</code></pre></p> </li> <li> <p><code>Robin Scherbatsky.txt</code> <pre><code>1980\n</code></pre></p> </li> <li> <p><code>Barney Stinson.txt</code> <pre><code>1976\n</code></pre></p> </li> <li> <p><code>Lily Aldrin.txt</code> <pre><code>1978\n</code></pre></p> </li> </ul> <p>Now <code>ls</code> should show you:</p> <p><pre><code>ls\n'Barney Stinson.txt'  'Marshall Eriksen.txt'    teds_friends.txt\n'Lily Aldrin.txt'     'Robin Scherbatsky.txt'\n</code></pre> The workspace is very messy. Let us use directories to organize our files</p> <p>Create 2 new directories:</p> <ul> <li><code>married</code></li> <li><code>single</code></li> </ul>"},{"location":"05-CLI-Git/#filesdirectories-with-spaces","title":"Files/Directories with Spaces","text":"<p>Making files with spaces is slightly different, all you need to do is <pre><code>nano 'Marshall Eriksen.txt' # The Quotes allow you to use spaces in the filename\n</code></pre> You can even use double quotes, or the escape character for spaces such as <code>nano Marshall\\ Eriksen.txt</code></p>"},{"location":"05-CLI-Git/#mv","title":"<code>mv</code>","text":"<p>We can move files into specific directories using the <code>mv</code> command</p> <p>Try the following commands to move <code>Marshall Eriksen.txt</code> and <code>Lily Aldrin.txt</code> into <code>married</code>:</p> <ul> <li> <p><code>mv \"Marshall Eriksen.txt\" married/ # 'Marshall Eriksen.txt' is moved into the directory 'married'</code></p> </li> <li> <p><code>mv \"Lily Aldrin.txt\" \"married/Lily Aldrin.txt\" # renames 'Lily Aldrin.txt' as 'married/Lily Aldrin.txt' and hence moves it into 'married'</code></p> </li> </ul> <p>The <code>mv</code> command works the same as cut and paste functionality.</p>"},{"location":"05-CLI-Git/#cp","title":"<code>cp</code>","text":"<p>We can create copies of files using the <code>cp</code> command, some might prefer combining <code>cp</code> and <code>rm</code> over using <code>mv</code> since it gives you a chance to double check.</p> <pre><code>cp 'Barney Stinson.txt' 'single/Barney Stinson.txt' # makes a copy of 'Barney Stinson.txt' and pastes it into single/Barney Stinson.txt\n</code></pre> <p>Do the same for <code>Robin Scherbatsky.txt</code></p>"},{"location":"05-CLI-Git/#tree","title":"<code>tree</code>","text":"<p>At this point <code>ls</code> can get confusing, to better visualize the contents of <code>PWD</code> use the <code>tree</code> command.</p> <p>Unfortunately <code>tree</code> doesn't work on <code>Git Bash</code> so you can use <code>ls -R</code> instead or even access the windows alternative with <code>tree.com //F</code>.</p> <p><pre><code>tree # displays the names of files and directories in the PWD in a recursive manner\n.\n\u251c\u2500\u2500 Barney Stinson.txt\n\u251c\u2500\u2500 Robin Scherbatsky.txt\n\u251c\u2500\u2500 married\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Lily Aldrin.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Marshall Eriksen.txt\n\u251c\u2500\u2500 single\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Barney Stinson.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Robin Scherbatsky.txt\n\u2514\u2500\u2500 teds_friends.txt\n\ntree.com //F # *what is this?* tree is a windows command, by using the .com we are accessing windows commands from within git bash, the //F is a command option, just like how linux uses -f, -h etc, windows uses /F, /H etc.\nC:.\n\u2592   teds_friends.txt\n\u2592\n+---married\n\u2592       Lily Aldrin.txt\n\u2592       Marshall Eriksen.txt\n\u2592\n+---single\n        Barney Stinson.txt\n        Robin Scherbatsky.txt\n</code></pre> If you've done everything right till this point, you will see this as the output.</p>"},{"location":"05-CLI-Git/#rm","title":"<code>rm</code>","text":"<p>We made copies of <code>Barney Stinson.txt</code> and <code>Robin Scherbatsky.txt</code>, so now let's delete the originals with a simple, yet permanent command.</p> <p>Use the <code>rm</code> command to delete files</p> <pre><code>rm 'Barney Stinson.txt'\n</code></pre> <pre><code>rm 'Robin Scherbatsky.txt'\n</code></pre> <p>Run <code>tree</code> / <code>ls -R</code> / <code>tree.com //F</code> again to see what your <code>pwd</code> now looks like.</p> <p>Now let's make a folder for saving the names of all of Ted Mosby's dates called <code>dates</code> <pre><code>mkdir dates\n</code></pre></p>"},{"location":"05-CLI-Git/#rmdir","title":"<code>rmdir</code>","text":"<p>Who are we kidding, Ted went on like a 100 different dates, let's just delete the folder.</p> <p>Poor Ted :(</p> <p>Use the <code>rmdir</code> command to delete directories.</p> <pre><code>rmdir dates\n</code></pre> <p>If the directory had files in them you could use rm -rf to recursively delete the files and then the directory itself, using the below command.</p> <pre><code>rm -rf dates # -r specifies recursion, -f specifies force. Deletes a directory recursively\n</code></pre> <p>Be careful while using this command as a few mistypes and you might end up accidentally deleting every single file from the system!</p>"},{"location":"05-CLI-Git/#cool-stuff","title":"Cool Stuff","text":"<p>Remember when we said CLI's can do stuff GUI's easily cannot, well now that we covered the basics, let's look at some of the possibilities.</p>"},{"location":"05-CLI-Git/#wc","title":"<code>wc</code>","text":"<p>The <code>wc</code> command or the word count command is used, as its name suggests, to get the counts. It can be used to get the number of lines, word counts, byte/character count.</p> <p>Try <pre><code>wc teds_friends.txt\n4  8 62 teds_friends.txt\n</code></pre></p> <p>So what do these numbers mean? *   4 - Number of lines</p> <ul> <li> <p>8 - Number of Words</p> </li> <li> <p>62 - Number of Characters (includes spaces and newlines)</p> </li> </ul> <p>Options:</p> <p>Adding the <code>-l</code> option, gives you only the number of lines in the file. Adding the <code>-w</code> option, gives you only the number of words in the file. Adding the <code>-c</code> option, gives you only the number of characters in the file.</p> <p>Feel free to use the <code>man</code> command to see more about the command options <pre><code>man wc\n</code></pre></p> <p>or for <code>Git Bash</code> users <pre><code>wc --help\n</code></pre></p>"},{"location":"05-CLI-Git/#grep","title":"<code>grep</code>","text":"<p><code>grep</code> command is used to search for a specific string in a given file. <code>GREP</code> stands for   Global Regular Expression Print. It has a simple syntax given by:</p> <p><pre><code>grep string_to_search file_to_search_from\n</code></pre> So let's try it</p> <p><pre><code>grep Lil teds_friends.txt\nLily Aldrin\n</code></pre> This finds the phrase Lil in the file, and prints the line it was in.</p>"},{"location":"05-CLI-Git/#variables","title":"Variables","text":"<p>The Linux command line can even have variables, variables are used to store any sort of information, and they can be referenced later.</p> <p>Example: <pre><code>temp_variable=\"hello world\"\n</code></pre></p> <p>Now there is a local variable called temp_variable saved in this session, make sure there are no spaces before or after the <code>=</code> sign.</p> <p>Referencing the created variable <pre><code>echo $temp_variable\n</code></pre></p> <p>The <code>$</code> is used to reference this variable in the terminal. But the functionality of the <code>$</code> doesn't end here.</p> <p>Command Substitution</p> <p>Here's another cool thing you can do with this concept <pre><code>echo \"The output of the wc command is $(wc teds_friends.txt)\"\nThe output of the wc command is  4  8 62 teds_friends.txt\n</code></pre></p> <p>As you can see, by using $(command) this allows you to combine commands easily, you might find use for this in combination with mathemathical commands such as <code>expr</code> and more.</p>"},{"location":"05-CLI-Git/#piping","title":"Piping","text":"<p>Piping can be very useful and it allows you to do more complex tasks.</p> <p>Piping commands enables the output of one command to be used as the input for another.</p> <p>Syntax: <pre><code>command_1 | command_2 | command_3 | .... | command_N\n</code></pre></p> <p>Example: <pre><code>echo \"Ted Mosby\" | wc\n      1       2      10\n</code></pre> So what just happened?</p> <p>The output of <code>echo \"Ted Mosby\"</code> is sent to <code>wc</code>, so wc then outputs 1 line, 2 words, 10 characters (including the newline).</p> <p>Let's do something slightly more complex to understand piping better. Example: <pre><code>printf \"Ted Mosby\\nAnd Friends\" | grep Friends | wc\n      1       2      12\n</code></pre> So again, what just happened?</p> <p><code>printf</code> outputs <pre><code>Ted Mosby\nAnd Friends\n</code></pre> then <code>grep Friends</code> searches that string and outputs <pre><code>And Friends\n</code></pre> Now this is passed to <code>wc</code> which of course prints the final output that is, 1 line, 2 words, and 12 characters. Pretty nifty right!</p>"},{"location":"05-CLI-Git/#output-redirection","title":"Output Redirection","text":"<p>The symbols used for output redirection are <code>&gt;</code> and <code>&gt;&gt;</code>. Output redirection allows you to save the output of a certain command into a file instead of just printing it to terminal and losing it forever.</p> <p>Example: <pre><code>echo \"Ted Mosby\" &gt; tempfile.txt # Writes \"Ted Mosby\" to new file called tempfile.txt, or replaces content if the file already exists\n</code></pre></p> <p>And now you can use <code>ls</code> to see a new file, and <code>cat</code> to see what just happened.</p> <pre><code>cat tempfile.txt\nTed Mosby\n</code></pre> <p>Let's also explore the <code>&gt;&gt;</code> symbol</p> <p><pre><code>echo \"the architect\" &gt;&gt; tempfile.txt # Adds to existing file called tempfile.txt or creates file if it doesn't exist\n</code></pre> Now if you <code>cat tempfile.txt</code> you will see <pre><code>Ted Mosby\nthe architect\n</code></pre></p>"},{"location":"05-CLI-Git/#commands-galore","title":"Commands Galore!","text":"<p>Let's just see a few more commands, of course there are so much more, but that's what Google is for!</p>"},{"location":"05-CLI-Git/#history","title":"<code>history</code>","text":"<p>Use the <code>history</code> command to show your command history</p> <pre><code>history\n</code></pre> <p>You can combine <code>grep</code> and <code>history</code> to search for a particular command</p> <pre><code>history | grep \"cd\"\n</code></pre>"},{"location":"05-CLI-Git/#expr","title":"<code>expr</code>","text":"<p>Use the <code>expr</code> command to do simple math or comparisions</p> <pre><code>expr 1 + 1  # ensure correct spacing\n2\n</code></pre>"},{"location":"05-CLI-Git/#whoami","title":"<code>whoami</code>","text":"<p>It displays the username of the current user when this command is invoked</p> <pre><code>whoami\n</code></pre>"},{"location":"05-CLI-Git/#sudo","title":"<code>sudo</code>","text":"<p>Sudo stands for SuperUser DO and is used to access restricted files and operations</p> <p>This is command does not work with <code>Git Bash</code>. It is recommended not to use <code>sudo</code> anywhere unless you really know what you are doing.</p> <p><pre><code>sudo command\n</code></pre> Replace command with the command you wish to use</p> <p></p>"},{"location":"05-CLI-Git/#git-version-control","title":"Git - Version Control","text":"<p>Now that you are somewhat fluent in CLI's. Let's learn about Git, Git isn't restricted to Linux though, you can set it up on your windows machine too and use the same commands that you'll learn below. If you used <code>Git Bash</code> for the earlier section, your setup is already done!</p> <p>What is Version Control?</p> <p>Version control system (VCS) is a software tool that helps the developers keep track of every modification to the code. If a mistake is made and things break down, developers can go back and compare earlier versions to debug and help fix the problem.</p> <p>Why use Version Control?</p> <p>Version control allow ease of collaboration  with other developers with different teams working on different features. Besides that, developing software without using version control is risky, like not having backups.</p> <p>What is Git?</p> <p>Git is a version control system created by Linus Torvalds in 2005 for development of the Linux kernel. Git is distributed, every directory on every computer has a working copy of the code with a complete history of changes and full version tracking capabilities. </p> <p>Why use Git?</p> <p>Git is the best choice for developers. Here are the main reasons why:</p> <ul> <li>Git is fast in terms of performance using highly efficient algorithms to track all changes.</li> <li>Git is secure with all files, directories, versions, commits and tags secured with a cryptographically secure hashing algorithm called SHA1.</li> <li>Git is flexible with developers requiring no network access, when ready they can <code>push</code> their changes with one command.</li> <li>Git is free and an open-source project with thousands of developers maintaining it.</li> <li>Git is the factory standard, it is by far the most widely used version control system today.</li> </ul> <p>And finally Git can help keep your work safe, so you won't lose valuable checkpoints of your progress, it can also create a habit of saving, so that hopefully you don't end up like Barney Stinson here!</p>"},{"location":"05-CLI-Git/#installation","title":"Installation","text":"<p>First check that you don't already have git installed</p> <p>Try the following command:</p> <pre><code>git --version\n</code></pre> <p>If you don't have git installed you will see</p> <pre><code>command not found: git\n</code></pre> <p>So Follow the instructions on this page to install <code>git</code>.</p> <p>After installation, try the following command:</p> <pre><code>git --version\n</code></pre> <p>If the installation is successful, you should see the version of the installed software.</p> <pre><code>git version 2.23.0\n</code></pre> <p>If something went wrong, you would see the following message instead:</p> <pre><code>command not found: git\n</code></pre>"},{"location":"05-CLI-Git/#configuration","title":"Configuration","text":""},{"location":"05-CLI-Git/#config","title":"<code>config</code>","text":"<p>To use <code>git</code> properly, you must set your name and email.</p> <p>Use the <code>config</code> subcommand for this purpose.</p> <pre><code>git config --global user.name \"[full name]\"\ngit config --global user.email \"[email address]\"\n</code></pre> <p>To check the values with <code>config</code></p> <pre><code>git config --list\n</code></pre> <p>Since we used the <code>--global</code> flag with our <code>config</code>, the same name and email will be used for any <code>git</code> repo we have on our system.</p> <p>If you want to use a different name and email for a particular repo, use the <code>--local</code> flag instead</p> <pre><code>git config --local user.name \"[full name]\"\ngit config --local user.email \"[email address]\"\n</code></pre>"},{"location":"05-CLI-Git/#getting-started-with-version-control","title":"Getting Started with Version Control","text":"<p>Create a directory anywhere</p> <pre><code>mkdir himym\ncd himym\n</code></pre>"},{"location":"05-CLI-Git/#init","title":"<code>init</code>","text":"<p>To initialize the repository, use the <code>init</code> subcommand.</p> <pre><code>git init\n</code></pre> <p>You have now created a <code>git</code> repository on your local system. If you list all files.</p> <p><pre><code>ls -la\n</code></pre> In Windows, you can also use your file explorer and check the show hidden items option.</p> <p>You should see a .git directory. </p>"},{"location":"05-CLI-Git/#repository","title":"Repository","text":"<p>A repository is a directory that has elevated functionality.</p>"},{"location":"05-CLI-Git/#git","title":"<code>.git/</code>","text":"<p>The .git directory contains everything that's related to our repository. If you send a .git directory to someone else, they would have the complete git project and it's full history. </p> <p>If you ever want to stop tracking your project using git, you can just delete the .git directory.</p>"},{"location":"05-CLI-Git/#logical-areas-of-a-git-repository","title":"Logical Areas of a Git Repository","text":"<p>Git uses 3 logical areas to provide version control:</p> <ul> <li> <p>Working Tree</p> <p>Also called the working directory, this is what we see in our file system. When we add, delete, and edit files, we do that in the working tree.</p> </li> <li> <p>Staging Area (Index)</p> <p>The staging area is where you prepare the set of changes you want to add to your repository. It is the set of files that git will keep ready for a commit. This area allows us to have full control over the files we put into our next commit. If we have multiple files, only the changes in the staging area are put into the next commit.</p> </li> <li> <p>Repository</p> <p>This contains the commit history which allows us to access the previous versions of our project. The history is stored in the .git directory.</p> </li> </ul> <p>Create a file called <code>README.md</code></p> <pre><code>touch README.md\n</code></pre> <p>A README file contains information about your repository, directories and files. It is a form of documentation which is a guide to developers giving a description about your project and instructions on how to run the code. The <code>.md</code> stands for markdown file. Markdown is a markup language which is easy to use for formatting text.</p> <p>You can use <code>nano</code> to write the following into the file.</p> <pre><code># My First Repo\n\nHello, world!\n</code></pre>"},{"location":"05-CLI-Git/#status","title":"<code>status</code>","text":"<p>Use the <code>status</code> subcommand</p> <pre><code>git status\n</code></pre> <p>You will be provided with the following information.</p> <pre><code>On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    README.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p><code>git</code> assigns <code>README.md</code> as Untracked since it's a new file. It will start tracking the file once we add it to the staging area.</p> <p>In order to <code>commit</code> something, <code>git</code> needs to know exactly what to <code>commit</code>. In our case we want <code>git</code> to save the new file that we created, i.e. <code>README.md</code>. </p>"},{"location":"05-CLI-Git/#branches","title":"Branches","text":"<p>Git can track file changes across multiple braches/versions of a repository. Each branch is its own universe. Git allows you to create branches from existing ones and move across them.   The default branch is called <code>master</code>.</p>"},{"location":"05-CLI-Git/#commits","title":"Commits","text":"<p>A commit is nothing but a checkpoint.</p> <p>The <code>commit</code> command takes the staged changes and commits it to the project history.</p> <p>When making commits use a clear and concise message describing the changes you have made.</p>"},{"location":"05-CLI-Git/#add","title":"<code>add</code>","text":"<p>First let us add <code>README.md</code> to the staging area with the <code>add</code> subcommand</p> <p><pre><code>git add README.md\n</code></pre> You can alternatively use <code>git add .</code> when there are a lot of files and you wish to add all of them into your repo.</p> <p>Check the <code>status</code> of the repository</p> <pre><code>git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   README.md\n</code></pre> <p>Earlier, our file was untracked. <code>git</code> has now added the file into the staging area, it expresses this by putting the <code>README.md</code> in Changes to be committed. After adding it to the staging area, <code>git</code> realizes that we are planning to commit this file.</p>"},{"location":"05-CLI-Git/#commit","title":"<code>commit</code>","text":"<p>Confirm the changes with <code>commit</code> and a message by using the <code>-m</code> flag</p> <pre><code>git commit -m \"Intial Commit\" # the -m flag is for a message. A message usually describes what the commit has done.\n</code></pre> <p>Checking the status again</p> <pre><code>git status\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <p>Nothing to commit means everything in the staging area has already been committed.</p> <p>Working tree clean means there is nothing new in our directory.</p>"},{"location":"05-CLI-Git/#log","title":"<code>log</code>","text":"<p>We can <code>log</code> the <code>commit</code> history</p> <pre><code>git log # shows the most recent commit at the top\n</code></pre> <p>You can notice the following:</p> <ul> <li>40 hexadecimal character hash</li> <li>Author name and email</li> <li>Timestamp</li> <li>The message we provided</li> </ul> <p>Try to use the <code>-p</code> flag with <code>log</code></p> <pre><code>git log -p  # shows what changed with each commit\n</code></pre>"},{"location":"05-CLI-Git/#branch","title":"<code>branch</code>","text":"<p>Earlier we mentioned the master branch, we can even make branches of our own.</p> <p>Q) But why branches?</p> <p>It's always a good idea to make a new branch if you're planning on making any big changes and you want to keep the older versions alive. You don't want to be like Marshall here and make an irreversible mistake, commits and branches all make it easier for you to get your hair or your code back.</p> <p>To make a new branch all you need to do is <pre><code>git branch haircut\n</code></pre></p>"},{"location":"05-CLI-Git/#checkout","title":"<code>checkout</code>","text":"<p>Now that you have a new branch called <code>haircut</code>, before you can commit changes to it, you should check it out with a simple command called <code>checkout</code>.</p> <pre><code>git checkout haircut\n</code></pre> <p>And now you just moved from branch <code>master</code> to branch <code>haircut</code>. You can make any changes you want to the <code>README.md</code> file now and commit them to this branch.</p> <p><pre><code>echo \"I CUT MY HAIR\" &gt;&gt; README.md\ncat README.md\n# My First Repo\n\nHello, World!\nI CUT MY HAIR\n</code></pre> Now let's commit to branch <code>haircut</code>, since we already used <code>checkout</code> all we need to do is <pre><code>git add README.md\ngit commit -m \"Haircut commit\"\n</code></pre></p> <p>Remeber anytime you want to return to the <code>master</code> branch (and get your hair back), all you will need to do is.</p> <pre><code>git checkout master # Return to master branch\ncat README.md\n# My First Repo\n\nHello, World!\n</code></pre> <p>See thanks to <code>Git</code> we can get our hair back just like that.</p> <p>You can switch between branches using <code>git checkout</code> at any time and the files will be updated to when you last commited in said branch.</p> <p></p> <p>Congrats you just learned CLI + Simple Local Version Control.</p>"},{"location":"05-CLI-Git/#challenge-time","title":"Challenge Time","text":"<ul> <li> <p>Earlier today we made a folder <code>TedMosby</code>, make sure you are in that folder.   Hint<pre>\n  Use `pwd` to check, `cd` to navigate\n  </pre></p> </li> <li> <p>Ted drank waaay too much last night, he can't even remember how many friends he has, using the files at your disposal, can you tell him?   Hint<pre>\n  Think about the `wc` command and it's options in relation to the `teds_friends.txt` file\n  </pre></p> </li> <li> <p>Ted has a date tonight, the girl is way out of his league, but it worked out since Ted promised to bring a double date, can you tell him the names of his single friends.   Hint<pre>\n  For starters try the 'ls' command, but here's the tricky part, want to get rid of the .txt at the end of the file name, Google can be your friend. See the awk command. You will need to use piping for this.\n  If you're sure you can't figure out the answer &gt;\n    Final Answer<pre>\n  ls single | awk '{gsub(\".txt\",\"\");print}'\n    </pre>\n  </pre></p> </li> <li> <p>Well that didn't go well, but Barney seemed to have fun, as usual, we need to put him in his place, can you calculate his age, so we can remind him to stop acting like a child :D  Hint<pre>\n  Use command substitution with a math command such as `expr`\n    Final Answer<pre>\n  echo \"Barney's Age $(expr 2022 - $(cat \"single/Barney Stinson.txt\"))\"\n    </pre>\n  </pre></p> </li> <li> <p>Alright time to make some changes, but before we do remember version control, can you make the <code>TedMosby</code> folder into a git repo and commit all the files in it, don't forget to put a simple message with the commit.  Hint<pre>\n    This one is simple, just to test what you know about git. Ensure you are in the `TedMosby` folder before executing the following.\n    Answer<pre>\n    git init\n    git status # will show you the status of the files in the repo\n    git add . # will add all directories and files\n    git commit -m \"First Commit\"  \n    git log # will shows you your commit status\n    </pre>\n  </pre></p> </li> <li> <p>Ted's fighting with Lily and Marshall, it's time to cut them out, but just in case they stop fighting, lets make a new branch called <code>fight</code> (<code>git branch</code>, <code>checkout</code>), delete the <code>married</code> folder and it's files, and also edit the <code>teds_friends.txt</code> file to cut out Marshall Eriksen and Lily Aldrin.  Hint<pre>\n  Use `git branch fight` to make a new branch `fight` and `git checkout fight` to get onto the newly created branch `fight`.\n\n  Use rm -rf for deleting the folder `married`, and use nano to edit `teds_friends.txt`\n  </pre></p> </li> <li> <p>Commit the new changes to the new branch <code>fight</code>, let the message be \"In a fight!\". Don't forget to <code>git add</code> and check if it worked with <code>git log</code>.</p> </li> <li>Good news, Ted's made up with his friends, um but we deleted Lily and Marshall, can we bring them back? That's the magic of <code>Git</code>. Find a way to <code>checkout</code> the other branch and get the friends back together!</li> </ul> <p>And that's happily ever after... kinda... Checkout the resources below if you weren't able to do any of these tasks or you just want to learn more. Find Cheatsheets, documentations, courses, games and more.  </p>"},{"location":"05-CLI-Git/#whats-next","title":"What's next?","text":"<p>Here are some Github repositories that you can make use of for additional information.</p>"},{"location":"05-CLI-Git/#learn-by-doing","title":"Learn By Doing","text":"<ul> <li>A very fun CTF style game to learn CLI's . The Game requires SSH capabilites, you can do that from the default windows terminal but we recommend installing something like PuTTY</li> <li>Game To help you visualise and learn Git commands</li> </ul>"},{"location":"05-CLI-Git/#learn-traditionally","title":"Learn Traditionally","text":"<ul> <li>CLI Crash Course - freeCodeCamp</li> <li>Basics of Git Course</li> </ul>"},{"location":"05-CLI-Git/#cool-stuff_1","title":"Cool Stuff","text":"<ul> <li>Quick Help sheet for LOADS of linux commands</li> <li>Command Line Cheat Sheet</li> <li>Basic Git Guide for beginners</li> <li>Git Documentation</li> </ul>"},{"location":"06-GitHub/","title":"Git &amp; GitHub - 1","text":""},{"location":"06-GitHub/#what-are-version-control-systems","title":"What are Version Control Systems?","text":"<p>Let's say you are working on completing your Math-II Assignment, which requires you to write code to do some math stuff. As you keep writing your amazing code, you notice that you have to keep track of the code changes you write, so that you could come back to an old version if you mess up. As you might not be aware about VCS then, you decided to create multiple copies of your files (as shown below) to keep track of your changes.</p> <p></p> <p>What if you were working on a group project (like that of OOPS), where you work with multiple people, on the same codebase.</p> <p></p> <p>Aah! You might probably see a problem here (the pain of managing the versions of files and working with alot of people at the same time!). That is where a Version Control System comes into play.</p> <p>Version Control Systems (or VCS) are systems that allow you to keep track of the changes you make in your files, which are stored insice a repository (a folder), including who made what changes and when. So if something screws up, you could always look up in your history of changes, and go back to a version where it was all okay (phew).</p> <p>There are two types of VCS:</p> <ul> <li>Centralized</li> <li>Distributed</li> </ul>"},{"location":"06-GitHub/#git","title":"Git","text":"<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It is the most popular VCS used in the industry (that is why you find \"Git\" in \"Required Skills\" in most of the Software related jobs).</p> <p></p>"},{"location":"06-GitHub/#setting-up-git","title":"Setting up Git","text":"<ul> <li>Installing Git</li> </ul> <p>MacOS/Linux:</p> <p>If you are using MacOS, you are in luck, as you (probably )already have Git installed on your system. </p> <p>To check if you have it installed, open Terminal, and enter the following command:</p> <pre><code>git --version\n</code></pre> <p>Windows</p> <p>Go to Git's website, and download Git installer. Open up downloaded installer, and follow the steps to install Git on your system.</p> <ul> <li>Configuring Git</li> </ul> <p>Before we get started using Git, we'll have to configure it (only for the first time). We will be configuring Name, Email, Default Editor, and Line Ending. For each of these enter the commands, as shown below.</p> <p>Name:</p> <pre><code>git config --global user.name \"Michael Scott\"\n</code></pre> <p> Email:</p> <pre><code>git config --global user.email worldsbestboss@email.com\n</code></pre> <p>Default Editor:</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Line Endings:</p> <pre><code>git config --global core.autocrlf true      # Windows\n</code></pre> <pre><code>git config --global core.autocrlf input     # MacOS\n</code></pre>"},{"location":"06-GitHub/#git-commands","title":"Git Commands","text":"<p>Throughout the course of this documentation, we'll try to focus on maintaining a project that we are building, and use Git along with it, to see how it works. Let's jump right in! </p> <p></p> <p>To start of, let's create a directory to store the files we use for the project. </p> <pre><code>mkdir my-amazing-project\ncd my-amazing-project\n</code></pre>"},{"location":"06-GitHub/#init","title":"<code>init</code>","text":"<p>Although we have a directory created, this directory is not yet a git repository. </p> <p>To make any directory, a git repository, use the <code>init</code> command.</p> <pre><code>git init\n</code></pre> <p>Once you have initialized the git repository, you will see that you have new directory created called as <code>.git</code>. This is where git stores all the information that git needs to track your project (you really don't have to know what any of the things inside this directory does, to use git). </p> <p>As the repository is now a <code>git</code> repository, you can now start writing code! If you have VS Code installed in your system, you can use <code>code</code> command to open up the IDE.</p> <pre><code>code file1\n</code></pre>"},{"location":"06-GitHub/#add","title":"<code>add</code>","text":"<p>Once you are done writing code, let's start the next step of tracking our repository. </p> <p>Git has this special place allocated to review the changes you have in the files you have added, changed or deleted, called as the Staging Area. </p> <p>To add files into the staging area, use the <code>add</code> command.</p> <pre><code>git add file1\n</code></pre> <p>To add all the files in your repository (recursively), use <code>.</code> to indicate all files. Be careful while using this, as you might not always want to add all the files to your staging area.</p> <pre><code>git add .\n</code></pre>"},{"location":"06-GitHub/#staging-area","title":"Staging Area","text":"<p>The staging area contains all of the information about what files and changes are going into the next snapshot of the repository.</p> <p>Files inside a <code>git</code> repository are of two types:</p> <ul> <li>Untracked: These files are the new files that you add into your repository, that git still haven't started tracking. </li> <li> <p>Tracked: These files are the ones' that git is already keeping track of. These files could either be:</p> <ul> <li>modified: This means that we have made changes into the tracked file, but it has not yet been staged or commited. Git won't notice these files until we stage these files.</li> <li>staged: These are modified files which are ready to be commited (added into the next snapshot of the repository). </li> <li>commited: The changes of these files are stored into the <code>git</code> repsoitory, after the snapshot is taken.</li> </ul> </li> </ul> <p>To list the files in the staging area use <code>ls-files</code> command.</p> <pre><code>git ls-files\n</code></pre>"},{"location":"06-GitHub/#restore","title":"<code>restore</code>","text":"<p>To remove files or directories from the staging area, use the <code>restore</code> command.</p> <pre><code>git restore --staged file1\n</code></pre> <p>You can also <code>restore</code> command to discard all the local changes made to your files in your repository.</p> <pre><code>git restore .\n</code></pre> <p><code>restore</code> command is also used to restore a file to how it was in a previous commit.</p> <pre><code>git restore --source=HEAD file1\n</code></pre>"},{"location":"06-GitHub/#status","title":"<code>status</code>","text":"<p>To see the status of your <code>git</code> directory and the staging area, use the <code>status</code> command.</p> <pre><code>git status\n</code></pre> <p>To get a short and concise status, use the <code>-s</code> flag.</p> <pre><code>git status -s\n</code></pre>"},{"location":"06-GitHub/#commit","title":"<code>commit</code>","text":"<p>Once you are done reviewing the changes you want in the next snapshot of your repository, you are now ready to click that snapshot. </p> <p></p> <p>To click a snapshot of the repository, use the <code>commit</code> command.</p> <pre><code>git commit\n</code></pre> <p>After entering this command, your default editor will open up, where you can type in your commit message. Once you are done entering the message, save the file, and exit the editor. This will complete the process of making a commit in your git repository!</p> <ul> <li>Alternatively, you can also type a short commit message directly from a command, by using the <code>-m</code> flag.</li> </ul> <pre><code>git commit -m \"My first commit!\"\n</code></pre>"},{"location":"06-GitHub/#diff","title":"<code>diff</code>","text":"<p>Sometimes, before you stage your code, you would want to inspect the changed code. To see the difference between the old and new versions of your file, use the diff command.</p> <pre><code>git diff\n</code></pre> <p>This command will only show you the changes made to unstaged files.</p> <p>To see the changes made in staged files, use <code>--staged</code> flag.</p> <pre><code>git diff --staged\n</code></pre>"},{"location":"06-GitHub/#log","title":"<code>log</code>","text":"<p>To inspect the history of the commits made in a <code>git</code> repository, use the <code>log</code> command.</p> <pre><code>git log\n</code></pre> <p>You would be seeing an output as shown below</p> <pre><code>commit 227fbdb4ef3a05b2df0dfdc4fbea61e2d13af044 (HEAD -&gt; master)\nAuthor: Michael Scott &lt;worldsbestboss@email.com&gt;\nDate:   Thu Nov 25 00:11:14 2022 +0400\n\n    Collect Power Stone\n</code></pre> <p>The huge string that you see along with <code>commit</code> is a commit's number. It is a 40-character hexadecimal string, which uniquely identifies a commit.</p> <p>master: This refers to the final branch in your git repository (More about branches discussed later in this documentation). </p> <p>HEAD: This refers to the current branch pointed by git.</p> <p>To see the <code>log</code> in a concise manner, use the <code>--oneline</code> flag.</p> <pre><code>git log --oneline\n</code></pre>"},{"location":"06-GitHub/#show","title":"<code>show</code>","text":"<p>To see the changes that were made in a particular, use the <code>show</code> command, along with the commit number of the commit you want to see.</p> <pre><code>git show 227fbd\n</code></pre> <p>To see the last commit you made, use <code>HEAD</code>.</p> <pre><code>git show HEAD\n</code></pre> <p>To see the second last commit you made, use <code>~</code>.</p> <pre><code>git show HEAD~1\n</code></pre> <p>To see the full file of a previous commit (rather than just the changes made), use the <code>show</code> command along with the full path of the file you want to see.</p> <pre><code>git show HEAD:file1\n</code></pre> <p>To see all the files and directories in a commit, use <code>ls-tree</code> command.</p> <pre><code>git ls-tree HEAD\n</code></pre>"},{"location":"06-GitHub/#git-workflow","title":"Git Workflow","text":"<p>Step 1: You start off by creating a git repository (<code>init</code>).</p> <p>Step 2: Write all the code you need into this repository (<code>code</code>).</p> <p>Step 3: Once you are done writing/editing code, we add the new/changed files into a special place called as the staging area (<code>add</code>).</p> <p>Step 4: Once you review your changes, you will now take a snapshot of the repository (<code>commit</code>).</p> <p>Step 5: If you have new changes to make into your repository, continue the workflow from step 2.</p>"},{"location":"06-GitHub/#best-practices","title":"Best Practices","text":"<ul> <li>Don't make small commits: You really don't have to make a commit every time you make a change in a file. </li> <li>Don't make huge commits: Rather than commiting the entire project at once, it's the best to commit every time you hit a checkpoint (eg: Implements a function for your OOPs Project)</li> <li>Write Proper Commit Messages: When writing a commit message, make sure to write meaningful commit messages (rather than just \"Update file1\")</li> </ul>"},{"location":"06-GitHub/#gitignore","title":"<code>.gitignore</code>","text":"<p>To hide files from tracking, there is a special file used for it called as <code>.gitignore</code>. The file (or directory) names stored inside this file, won't be tracked by git, and will be ignored.</p> <p>Example:</p> <p>If there was text file called <code>ignoreme.txt</code> in a repository, it could be ignored by adding the following text in <code>.gitignore</code> file.</p> <pre><code>ignoreme.txt\n</code></pre>"},{"location":"06-GitHub/#branches","title":"Branches","text":"<p>What if you are working as a Software Development Engineer at Google, on their Maps Application, and you had to develop a feature to find the time taken by a kite to follow the directions to a location? Would you directly make changes to the deployed application, to implement your feature? Or would you try to play it safe and make sure your feature is all good, before you add it to the deployed application?</p> <p>You might probably choose the second option. That is where branches come in!</p> <p>Branching allows you to create a copy (branch) of your current working directory, and make changes (commits) to this copy, without disturbing anything else.</p> <p></p> <p>The default branch that git creates for you, when a new repository is created (<code>init</code>) is called master.</p> <p>To see all the branches in your repository, use the <code>branch</code> command</p> <pre><code>git branch\n</code></pre> <p>To create a new branch, add the new branch name along with <code>branch</code> command.</p> <pre><code>git branch kite-feature\n</code></pre> <p>To switch to different branch, use the <code>checkout</code> command.</p> <pre><code>git checkout kite-feature\n</code></pre> <p>To create a branch and switch the branch at the same time, use the <code>-b</code> flag along with <code>checkout</code> command.</p> <pre><code>git checkout -b kite-feature\n</code></pre> <p>To delete a branch, use the <code>-d</code> flag along with <code>branch</code> command.</p> <pre><code>git branch -d kite-feature\n</code></pre>"},{"location":"06-GitHub/#merge","title":"Merge","text":"<p>To merge the changes between branches, use the <code>merge</code> command.</p> <pre><code>git merge from_which_branch_to_merge_from\n</code></pre> <p></p>"},{"location":"06-GitHub/#merge-conflicts","title":"Merge Conflicts","text":"<p> Merge Conflict is the problem that occur when Git is unable to automatically merge branches (or commits).</p> <p>When merging a branch, where all changes occur on different lines or in different files, Git will automatically be able to merge them.</p> <p>A conflict occurs when the changes made occur on the same line, as Git won't be able to figure out which change to keep, and which change to discard.</p>"},{"location":"06-GitHub/#remotes","title":"Remotes","text":"<p>A remote repository in Git, also called a remote, is a Git repository that\u2019s hosted on the Internet or another network. (It's basically like how you could host your pictures or folders on Google Drive)</p> <p>This is where GitHub comes into picture! Few other popular examples of remotes are BitBucket and GitLab.</p> <p>GitHub is a cloud-based platform, that allows you to host your <code>git</code> repositories, and collaborate with others, </p> <p>Before we move ahead, create an account on GitHub, and sign in to it.</p> <p>To set up your GitHub user with your <code>git</code>, add your GitHub username to <code>config</code>.</p> <p></p> <pre><code>git config --global user.name \"MrPoop\"\n</code></pre> <p>To save your password for later, enter the following command</p> <pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"06-GitHub/#adding-remotes-to-git-repo","title":"Adding Remotes to Git Repo","text":"<p>To add a remote to repository you have in your local system, use the <code>remote</code> command.</p> <pre><code>git remote add origin https://github.com/MrPoop/my-first-repo.git\n</code></pre> <p><code>origin</code> as mentioned in the command, is the name we are calling for the remote we just added.</p>"},{"location":"06-GitHub/#push","title":"<code>push</code>","text":"<p>To update the commits you made on your local system, to your remote (GitHub), use the <code>push</code> command.</p> <pre><code>git push origin master\n</code></pre> <p>While pushing a new <code>feature</code> branch onto remote, <code>-u</code> should be used.</p> <pre><code>git push -u origin kite-feature\n</code></pre> <p>To delete a branch from the remote, use the <code>--delete</code> flag.</p> <pre><code>git push --delete origin kite-feature\n</code></pre>"},{"location":"06-GitHub/#clone","title":"<code>clone</code>","text":"<p>To clone a repository which is hosted on a remote, use the <code>clone</code> command.</p> <pre><code>git clone https://github.com/MrPoop/my-first-repo.git\n</code></pre>"},{"location":"06-GitHub/#fetch","title":"<code>fetch</code>","text":"<p>To update all the remote tracking branches in the local repository, use the <code>fetch</code> command.</p> <pre><code>git fetch origin master\n</code></pre> <p>NOTE: The changes are fetched from the remote only, and are not merged into the local. The changes will have to then be merged into the local using the <code>merge</code> command.</p> <pre><code>git merge origin/master\n</code></pre>"},{"location":"06-GitHub/#pull","title":"<code>pull</code>","text":"<p>To retrieve the changes made in the remote, but not in the local, use the <code>pull</code> command.</p> <pre><code>git pull origin master\n</code></pre> <p>(This command is used instead of using <code>fetch</code> and <code>merge</code>, as it fetches the changes and updates the local as well.)</p>"},{"location":"06-GitHub/#best-practices-for-collaboration","title":"Best Practices for Collaboration","text":"<ul> <li>Always synchronize your branches before starting any work on your own.</li> <li>Avoid having very large changes that modify a lot of different things.</li> <li>When working on a big change, it makes sense to have a seperate feature branch.</li> <li>Regularly merge changes made on the master branch back onto the feature branch.</li> <li>Have the latest version of the project in the main branch, and the stable version of the project on a seperate branch.</li> <li>Having good commit message is important.</li> </ul>"},{"location":"06-GitHub/#contributions","title":"Contributions","text":""},{"location":"06-GitHub/#forking","title":"Forking","text":"<p>A way of creating a copy of a given repository, so that it belongs to our user. This let's you work on a copy of any code that you see on GitHub (including GitHub itself!). </p> <p></p>"},{"location":"06-GitHub/#pull-requests","title":"Pull Requests","text":"<p>A commit or series of commits that you send to the owner of a repository, so that they incorporate your code commits into their actual tree.</p>"},{"location":"06-GitHub/#contribution-workflow","title":"Contribution Workflow","text":"<p>Step 1: Create a fork of the repository that you want to work on.</p> <p>Step 2: Clone the fork into your local system.</p> <p>Step 3: You could create a new branch in your clone to start working on the code you want to add.</p> <p>Step 4: Make all the changes you want into that branch.</p> <p>Step 5: Once done making changes, commit the changes.</p> <p>Step 6: Once all the commits are made, you can now <code>push</code> the changes into your fork, in the remote.</p> <p>Step 7: You can now create a pull request from your fork, on your remote (GitHub), onto the actual repository.</p> <p>Test out the workflow by making your first contribution on GitHub:</p> <ul> <li>Go to the <code>my-first-contribution</code> repository of ACMBPDC. </li> <li>Fork this repository into your user. </li> <li>Clone this fork into your local system.</li> <li>Create a branch called with your name (eg: <code>Michael</code>).</li> <li>Create a text file into this branch, with your name, and something really cool about yourself. </li> <li>Save this text file, and commit the changes.</li> <li>Push the changes from this branch, into remote (GitHub).</li> <li>Go to your GitHub Fork. You'll see an option as shown below.</li> </ul> <p></p> <ul> <li>Click on <code>Compare &amp; pull request</code>.</li> <li>Create a pull request.</li> <li>Once the maintainer of the repository reviews your code, they'll merge your code into their repository.</li> </ul> <p>YAY! You just made your first contribution! \ud83c\udf89</p> <p></p>"},{"location":"06-GitHub/#project","title":"Project","text":"<p>This concludes the ACM Bootcamp 2022, we hope you enjoyed it as much as us, and remember you can always refer back to these docs to help you in the future.</p> <p>Here you can find a project that utilises the concepts you learnt through this bootcamp.</p> <p>We encourage you to try to make a project yourself to learn by doing, some useful resources are listed below to help you get started.</p>"},{"location":"06-GitHub/#project-resources","title":"Project Resources","text":"<ul> <li>List Of Free API's you can use for your websites</li> <li>Firebase - Can be used for databases</li> <li>Netlify - Can be used to host your website</li> <li>Generate CSS Gradients</li> <li>Bootstrap - A great package with HTML,CSS,JS based elements</li> <li>Postman - API Testing</li> <li>MDN Web Docs</li> <li>Font Awesome Icons</li> <li>Colour Palette Generator</li> </ul>"}]}